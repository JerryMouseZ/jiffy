/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "chain_request_service.h"
#ifndef chain_request_service_TCC
#define chain_request_service_TCC


namespace mmux { namespace storage {


template <class Protocol_>
uint32_t chain_request_service_run_command_args::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cmd_id.clear();
            uint32_t _size41;
            ::apache::thrift::protocol::TType _etype44;
            xfer += iprot->readListBegin(_etype44, _size41);
            this->cmd_id.resize(_size41);
            uint32_t _i45;
            for (_i45 = 0; _i45 < _size41; ++_i45)
            {
              xfer += iprot->readI32(this->cmd_id[_i45]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cmd_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _etype49;
            xfer += iprot->readListBegin(_etype49, _size46);
            this->arguments.resize(_size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              {
                this->arguments[_i50].clear();
                uint32_t _size51;
                ::apache::thrift::protocol::TType _etype54;
                xfer += iprot->readListBegin(_etype54, _size51);
                this->arguments[_i50].resize(_size51);
                uint32_t _i55;
                for (_i55 = 0; _i55 < _size51; ++_i55)
                {
                  xfer += iprot->readBinary(this->arguments[_i50][_i55]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t chain_request_service_run_command_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("chain_request_service_run_command_args");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd_id", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->cmd_id.size()));
    std::vector<int32_t> ::const_iterator _iter56;
    for (_iter56 = this->cmd_id.begin(); _iter56 != this->cmd_id.end(); ++_iter56)
    {
      xfer += oprot->writeI32((*_iter56));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->arguments.size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter57;
    for (_iter57 = this->arguments.begin(); _iter57 != this->arguments.end(); ++_iter57)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter57).size()));
        std::vector<std::string> ::const_iterator _iter58;
        for (_iter58 = (*_iter57).begin(); _iter58 != (*_iter57).end(); ++_iter58)
        {
          xfer += oprot->writeBinary((*_iter58));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


template <class Protocol_>
uint32_t chain_request_service_run_command_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("chain_request_service_run_command_pargs");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd_id", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->cmd_id)).size()));
    std::vector<int32_t> ::const_iterator _iter59;
    for (_iter59 = (*(this->cmd_id)).begin(); _iter59 != (*(this->cmd_id)).end(); ++_iter59)
    {
      xfer += oprot->writeI32((*_iter59));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->arguments)).size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter60;
    for (_iter60 = (*(this->arguments)).begin(); _iter60 != (*(this->arguments)).end(); ++_iter60)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter60).size()));
        std::vector<std::string> ::const_iterator _iter61;
        for (_iter61 = (*_iter60).begin(); _iter61 != (*_iter60).end(); ++_iter61)
        {
          xfer += oprot->writeBinary((*_iter61));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


template <class Protocol_>
uint32_t chain_request_service_run_command_result::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->success.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _etype65;
            xfer += iprot->readListBegin(_etype65, _size62);
            this->success.resize(_size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              {
                this->success[_i66].clear();
                uint32_t _size67;
                ::apache::thrift::protocol::TType _etype70;
                xfer += iprot->readListBegin(_etype70, _size67);
                this->success[_i66].resize(_size67);
                uint32_t _i71;
                for (_i71 = 0; _i71 < _size67; ++_i71)
                {
                  xfer += iprot->readBinary(this->success[_i66][_i71]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t chain_request_service_run_command_result::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("chain_request_service_run_command_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_LIST, 0);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->success.size()));
      std::vector<std::vector<std::string> > ::const_iterator _iter72;
      for (_iter72 = this->success.begin(); _iter72 != this->success.end(); ++_iter72)
      {
        {
          xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter72).size()));
          std::vector<std::string> ::const_iterator _iter73;
          for (_iter73 = (*_iter72).begin(); _iter73 != (*_iter72).end(); ++_iter73)
          {
            xfer += oprot->writeBinary((*_iter73));
          }
          xfer += oprot->writeListEnd();
        }
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


template <class Protocol_>
uint32_t chain_request_service_run_command_presult::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            (*(this->success)).clear();
            uint32_t _size74;
            ::apache::thrift::protocol::TType _etype77;
            xfer += iprot->readListBegin(_etype77, _size74);
            (*(this->success)).resize(_size74);
            uint32_t _i78;
            for (_i78 = 0; _i78 < _size74; ++_i78)
            {
              {
                (*(this->success))[_i78].clear();
                uint32_t _size79;
                ::apache::thrift::protocol::TType _etype82;
                xfer += iprot->readListBegin(_etype82, _size79);
                (*(this->success))[_i78].resize(_size79);
                uint32_t _i83;
                for (_i83 = 0; _i83 < _size79; ++_i83)
                {
                  xfer += iprot->readBinary((*(this->success))[_i78][_i83]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


template <class Protocol_>
uint32_t chain_request_service_chain_request_args::read(Protocol_* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->seq.read(iprot);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cmd_ids.clear();
            uint32_t _size84;
            ::apache::thrift::protocol::TType _etype87;
            xfer += iprot->readListBegin(_etype87, _size84);
            this->cmd_ids.resize(_size84);
            uint32_t _i88;
            for (_i88 = 0; _i88 < _size84; ++_i88)
            {
              xfer += iprot->readI32(this->cmd_ids[_i88]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.cmd_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->arguments.clear();
            uint32_t _size89;
            ::apache::thrift::protocol::TType _etype92;
            xfer += iprot->readListBegin(_etype92, _size89);
            this->arguments.resize(_size89);
            uint32_t _i93;
            for (_i93 = 0; _i93 < _size89; ++_i93)
            {
              {
                this->arguments[_i93].clear();
                uint32_t _size94;
                ::apache::thrift::protocol::TType _etype97;
                xfer += iprot->readListBegin(_etype97, _size94);
                this->arguments[_i93].resize(_size94);
                uint32_t _i98;
                for (_i98 = 0; _i98 < _size94; ++_i98)
                {
                  xfer += iprot->readBinary(this->arguments[_i93][_i98]);
                }
                xfer += iprot->readListEnd();
              }
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.arguments = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t chain_request_service_chain_request_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("chain_request_service_chain_request_args");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->seq.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd_ids", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->cmd_ids.size()));
    std::vector<int32_t> ::const_iterator _iter99;
    for (_iter99 = this->cmd_ids.begin(); _iter99 != this->cmd_ids.end(); ++_iter99)
    {
      xfer += oprot->writeI32((*_iter99));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>(this->arguments.size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter100;
    for (_iter100 = this->arguments.begin(); _iter100 != this->arguments.end(); ++_iter100)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter100).size()));
        std::vector<std::string> ::const_iterator _iter101;
        for (_iter101 = (*_iter100).begin(); _iter101 != (*_iter100).end(); ++_iter101)
        {
          xfer += oprot->writeBinary((*_iter101));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


template <class Protocol_>
uint32_t chain_request_service_chain_request_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("chain_request_service_chain_request_pargs");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->seq)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cmd_ids", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>((*(this->cmd_ids)).size()));
    std::vector<int32_t> ::const_iterator _iter102;
    for (_iter102 = (*(this->cmd_ids)).begin(); _iter102 != (*(this->cmd_ids)).end(); ++_iter102)
    {
      xfer += oprot->writeI32((*_iter102));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("arguments", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_LIST, static_cast<uint32_t>((*(this->arguments)).size()));
    std::vector<std::vector<std::string> > ::const_iterator _iter103;
    for (_iter103 = (*(this->arguments)).begin(); _iter103 != (*(this->arguments)).end(); ++_iter103)
    {
      {
        xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>((*_iter103).size()));
        std::vector<std::string> ::const_iterator _iter104;
        for (_iter104 = (*_iter103).begin(); _iter104 != (*_iter103).end(); ++_iter104)
        {
          xfer += oprot->writeBinary((*_iter104));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
void chain_request_serviceClientT<Protocol_>::run_command(std::vector<std::vector<std::string> > & _return, const int32_t block_id, const std::vector<int32_t> & cmd_id, const std::vector<std::vector<std::string> > & arguments)
{
  send_run_command(block_id, cmd_id, arguments);
  recv_run_command(_return);
}

template <class Protocol_>
void chain_request_serviceClientT<Protocol_>::send_run_command(const int32_t block_id, const std::vector<int32_t> & cmd_id, const std::vector<std::vector<std::string> > & arguments)
{
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("run_command", ::apache::thrift::protocol::T_CALL, cseqid);

  chain_request_service_run_command_pargs args;
  args.block_id = &block_id;
  args.cmd_id = &cmd_id;
  args.arguments = &arguments;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template <class Protocol_>
void chain_request_serviceClientT<Protocol_>::recv_run_command(std::vector<std::vector<std::string> > & _return)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("run_command") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  chain_request_service_run_command_presult result;
  result.success = &_return;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "run_command failed: unknown result");
}

template <class Protocol_>
void chain_request_serviceClientT<Protocol_>::chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<int32_t> & cmd_ids, const std::vector<std::vector<std::string> > & arguments)
{
  send_chain_request(seq, block_id, cmd_ids, arguments);
}

template <class Protocol_>
void chain_request_serviceClientT<Protocol_>::send_chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<int32_t> & cmd_ids, const std::vector<std::vector<std::string> > & arguments)
{
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("chain_request", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  chain_request_service_chain_request_pargs args;
  args.seq = &seq;
  args.block_id = &block_id;
  args.cmd_ids = &cmd_ids;
  args.arguments = &arguments;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template <class Protocol_>
bool chain_request_serviceProcessorT<Protocol_>::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second.generic))(seqid, iprot, oprot, callContext);
  return true;
}

template <class Protocol_>
bool chain_request_serviceProcessorT<Protocol_>::dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second.specialized))(seqid, iprot, oprot, callContext);
  return true;
}

template <class Protocol_>
void chain_request_serviceProcessorT<Protocol_>::process_run_command(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("chain_request_service.run_command", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "chain_request_service.run_command");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "chain_request_service.run_command");
  }

  chain_request_service_run_command_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "chain_request_service.run_command", bytes);
  }

  chain_request_service_run_command_result result;
  try {
    iface_->run_command(result.success, args.block_id, args.cmd_id, args.arguments);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "chain_request_service.run_command");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("run_command", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "chain_request_service.run_command");
  }

  oprot->writeMessageBegin("run_command", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "chain_request_service.run_command", bytes);
  }
}

template <class Protocol_>
void chain_request_serviceProcessorT<Protocol_>::process_run_command(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("chain_request_service.run_command", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "chain_request_service.run_command");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "chain_request_service.run_command");
  }

  chain_request_service_run_command_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "chain_request_service.run_command", bytes);
  }

  chain_request_service_run_command_result result;
  try {
    iface_->run_command(result.success, args.block_id, args.cmd_id, args.arguments);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "chain_request_service.run_command");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("run_command", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "chain_request_service.run_command");
  }

  oprot->writeMessageBegin("run_command", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "chain_request_service.run_command", bytes);
  }
}

template <class Protocol_>
void chain_request_serviceProcessorT<Protocol_>::process_chain_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  (void) seqid;
  (void) oprot;
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("chain_request_service.chain_request", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "chain_request_service.chain_request");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "chain_request_service.chain_request");
  }

  chain_request_service_chain_request_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "chain_request_service.chain_request", bytes);
  }

  try {
    iface_->chain_request(args.seq, args.block_id, args.cmd_ids, args.arguments);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "chain_request_service.chain_request");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "chain_request_service.chain_request");
  }

  return;
}

template <class Protocol_>
void chain_request_serviceProcessorT<Protocol_>::process_chain_request(int32_t, Protocol_* iprot, Protocol_*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("chain_request_service.chain_request", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "chain_request_service.chain_request");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "chain_request_service.chain_request");
  }

  chain_request_service_chain_request_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "chain_request_service.chain_request", bytes);
  }

  try {
    iface_->chain_request(args.seq, args.block_id, args.cmd_ids, args.arguments);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "chain_request_service.chain_request");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "chain_request_service.chain_request");
  }

  return;
}

template <class Protocol_>
::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > chain_request_serviceProcessorFactoryT<Protocol_>::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< chain_request_serviceIfFactory > cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr< chain_request_serviceIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > processor(new chain_request_serviceProcessorT<Protocol_>(handler));
  return processor;
}

template <class Protocol_>
void chain_request_serviceConcurrentClientT<Protocol_>::run_command(std::vector<std::vector<std::string> > & _return, const int32_t block_id, const std::vector<int32_t> & cmd_id, const std::vector<std::vector<std::string> > & arguments)
{
  int32_t seqid = send_run_command(block_id, cmd_id, arguments);
  recv_run_command(_return, seqid);
}

template <class Protocol_>
int32_t chain_request_serviceConcurrentClientT<Protocol_>::send_run_command(const int32_t block_id, const std::vector<int32_t> & cmd_id, const std::vector<std::vector<std::string> > & arguments)
{
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("run_command", ::apache::thrift::protocol::T_CALL, cseqid);

  chain_request_service_run_command_pargs args;
  args.block_id = &block_id;
  args.cmd_id = &cmd_id;
  args.arguments = &arguments;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template <class Protocol_>
void chain_request_serviceConcurrentClientT<Protocol_>::recv_run_command(std::vector<std::vector<std::string> > & _return, const int32_t seqid)
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while(true) {
    if(!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if(seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("run_command") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      chain_request_service_run_command_presult result;
      result.success = &_return;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "run_command failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

template <class Protocol_>
void chain_request_serviceConcurrentClientT<Protocol_>::chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<int32_t> & cmd_ids, const std::vector<std::vector<std::string> > & arguments)
{
  send_chain_request(seq, block_id, cmd_ids, arguments);
}

template <class Protocol_>
void chain_request_serviceConcurrentClientT<Protocol_>::send_chain_request(const sequence_id& seq, const int32_t block_id, const std::vector<int32_t> & cmd_ids, const std::vector<std::vector<std::string> > & arguments)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("chain_request", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  chain_request_service_chain_request_pargs args;
  args.seq = &seq;
  args.block_id = &block_id;
  args.cmd_ids = &cmd_ids;
  args.arguments = &arguments;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
}

}} // namespace

#endif
