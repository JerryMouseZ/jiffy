#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def run_command(self, seq_no, block_id, cmd_id, arguments):
        """
        Parameters:
         - seq_no
         - block_id
         - cmd_id
         - arguments
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def run_command(self, seq_no, block_id, cmd_id, arguments):
        """
        Parameters:
         - seq_no
         - block_id
         - cmd_id
         - arguments
        """
        self.send_run_command(seq_no, block_id, cmd_id, arguments)
        return self.recv_run_command()

    def send_run_command(self, seq_no, block_id, cmd_id, arguments):
        self._oprot.writeMessageBegin('run_command', TMessageType.CALL, self._seqid)
        args = run_command_args()
        args.seq_no = seq_no
        args.block_id = block_id
        args.cmd_id = cmd_id
        args.arguments = arguments
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_run_command(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = run_command_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.be is not None:
            raise result.be
        if result.cfe is not None:
            raise result.cfe
        raise TApplicationException(TApplicationException.MISSING_RESULT, "run_command failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["run_command"] = Processor.process_run_command

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_run_command(self, seqid, iprot, oprot):
        args = run_command_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = run_command_result()
        try:
            result.success = self._handler.run_command(args.seq_no, args.block_id, args.cmd_id, args.arguments)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except block_exception as be:
            msg_type = TMessageType.REPLY
            result.be = be
        except chain_failure_exception as cfe:
            msg_type = TMessageType.REPLY
            result.cfe = cfe
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("run_command", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class run_command_args(object):
    """
    Attributes:
     - seq_no
     - block_id
     - cmd_id
     - arguments
    """


    def __init__(self, seq_no=None, block_id=None, cmd_id=None, arguments=None,):
        self.seq_no = seq_no
        self.block_id = block_id
        self.cmd_id = cmd_id
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.seq_no = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.block_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.cmd_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.arguments.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('run_command_args')
        if self.seq_no is not None:
            oprot.writeFieldBegin('seq_no', TType.I64, 1)
            oprot.writeI64(self.seq_no)
            oprot.writeFieldEnd()
        if self.block_id is not None:
            oprot.writeFieldBegin('block_id', TType.I32, 2)
            oprot.writeI32(self.block_id)
            oprot.writeFieldEnd()
        if self.cmd_id is not None:
            oprot.writeFieldBegin('cmd_id', TType.I32, 3)
            oprot.writeI32(self.cmd_id)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.arguments))
            for iter6 in self.arguments:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(run_command_args)
run_command_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'seq_no', None, None, ),  # 1
    (2, TType.I32, 'block_id', None, None, ),  # 2
    (3, TType.I32, 'cmd_id', None, None, ),  # 3
    (4, TType.LIST, 'arguments', (TType.STRING, 'UTF8', False), None, ),  # 4
)


class run_command_result(object):
    """
    Attributes:
     - success
     - be
     - cfe
    """


    def __init__(self, success=None, be=None, cfe=None,):
        self.success = success
        self.be = be
        self.cfe = cfe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.be = block_exception()
                    self.be.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.cfe = chain_failure_exception()
                    self.cfe.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('run_command_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter13 in self.success:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.be is not None:
            oprot.writeFieldBegin('be', TType.STRUCT, 1)
            self.be.write(oprot)
            oprot.writeFieldEnd()
        if self.cfe is not None:
            oprot.writeFieldBegin('cfe', TType.STRUCT, 2)
            self.cfe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(run_command_result)
run_command_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'be', [block_exception, None], None, ),  # 1
    (2, TType.STRUCT, 'cfe', [chain_failure_exception, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs

