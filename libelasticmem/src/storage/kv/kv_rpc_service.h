/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef kv_rpc_service_H
#define kv_rpc_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "kv_rpc_service_types.h"

namespace elasticmem { namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class kv_rpc_serviceIf {
 public:
  virtual ~kv_rpc_serviceIf() {}
  virtual void put(const int32_t block_id, const std::string& key, const std::string& value) = 0;
  virtual void get(std::string& _return, const int32_t block_id, const std::string& key) = 0;
  virtual void update(const int32_t block_id, const std::string& key, const std::string& value) = 0;
  virtual void remove(const int32_t block_id, const std::string& key) = 0;
  virtual int64_t size(const int32_t block_id) = 0;
};

class kv_rpc_serviceIfFactory {
 public:
  typedef kv_rpc_serviceIf Handler;

  virtual ~kv_rpc_serviceIfFactory() {}

  virtual kv_rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(kv_rpc_serviceIf* /* handler */) = 0;
};

class kv_rpc_serviceIfSingletonFactory : virtual public kv_rpc_serviceIfFactory {
 public:
  kv_rpc_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf>& iface) : iface_(iface) {}
  virtual ~kv_rpc_serviceIfSingletonFactory() {}

  virtual kv_rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(kv_rpc_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf> iface_;
};

class kv_rpc_serviceNull : virtual public kv_rpc_serviceIf {
 public:
  virtual ~kv_rpc_serviceNull() {}
  void put(const int32_t /* block_id */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void get(std::string& /* _return */, const int32_t /* block_id */, const std::string& /* key */) {
    return;
  }
  void update(const int32_t /* block_id */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void remove(const int32_t /* block_id */, const std::string& /* key */) {
    return;
  }
  int64_t size(const int32_t /* block_id */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _kv_rpc_service_put_args__isset {
  _kv_rpc_service_put_args__isset() : block_id(false), key(false), value(false) {}
  bool block_id :1;
  bool key :1;
  bool value :1;
} _kv_rpc_service_put_args__isset;

class kv_rpc_service_put_args {
 public:

  kv_rpc_service_put_args(const kv_rpc_service_put_args&);
  kv_rpc_service_put_args& operator=(const kv_rpc_service_put_args&);
  kv_rpc_service_put_args() : block_id(0), key(), value() {
  }

  virtual ~kv_rpc_service_put_args() throw();
  int32_t block_id;
  std::string key;
  std::string value;

  _kv_rpc_service_put_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const kv_rpc_service_put_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_put_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_rpc_service_put_pargs {
 public:


  virtual ~kv_rpc_service_put_pargs() throw();
  const int32_t* block_id;
  const std::string* key;
  const std::string* value;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_put_result__isset {
  _kv_rpc_service_put_result__isset() : ex(false) {}
  bool ex :1;
} _kv_rpc_service_put_result__isset;

class kv_rpc_service_put_result {
 public:

  kv_rpc_service_put_result(const kv_rpc_service_put_result&);
  kv_rpc_service_put_result& operator=(const kv_rpc_service_put_result&);
  kv_rpc_service_put_result() {
  }

  virtual ~kv_rpc_service_put_result() throw();
  kv_rpc_exception ex;

  _kv_rpc_service_put_result__isset __isset;

  void __set_ex(const kv_rpc_exception& val);

  bool operator == (const kv_rpc_service_put_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_put_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_put_presult__isset {
  _kv_rpc_service_put_presult__isset() : ex(false) {}
  bool ex :1;
} _kv_rpc_service_put_presult__isset;

class kv_rpc_service_put_presult {
 public:


  virtual ~kv_rpc_service_put_presult() throw();
  kv_rpc_exception ex;

  _kv_rpc_service_put_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _kv_rpc_service_get_args__isset {
  _kv_rpc_service_get_args__isset() : block_id(false), key(false) {}
  bool block_id :1;
  bool key :1;
} _kv_rpc_service_get_args__isset;

class kv_rpc_service_get_args {
 public:

  kv_rpc_service_get_args(const kv_rpc_service_get_args&);
  kv_rpc_service_get_args& operator=(const kv_rpc_service_get_args&);
  kv_rpc_service_get_args() : block_id(0), key() {
  }

  virtual ~kv_rpc_service_get_args() throw();
  int32_t block_id;
  std::string key;

  _kv_rpc_service_get_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const kv_rpc_service_get_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_rpc_service_get_pargs {
 public:


  virtual ~kv_rpc_service_get_pargs() throw();
  const int32_t* block_id;
  const std::string* key;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_get_result__isset {
  _kv_rpc_service_get_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_rpc_service_get_result__isset;

class kv_rpc_service_get_result {
 public:

  kv_rpc_service_get_result(const kv_rpc_service_get_result&);
  kv_rpc_service_get_result& operator=(const kv_rpc_service_get_result&);
  kv_rpc_service_get_result() : success() {
  }

  virtual ~kv_rpc_service_get_result() throw();
  std::string success;
  kv_rpc_exception ex;

  _kv_rpc_service_get_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const kv_rpc_exception& val);

  bool operator == (const kv_rpc_service_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_get_presult__isset {
  _kv_rpc_service_get_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_rpc_service_get_presult__isset;

class kv_rpc_service_get_presult {
 public:


  virtual ~kv_rpc_service_get_presult() throw();
  std::string* success;
  kv_rpc_exception ex;

  _kv_rpc_service_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _kv_rpc_service_update_args__isset {
  _kv_rpc_service_update_args__isset() : block_id(false), key(false), value(false) {}
  bool block_id :1;
  bool key :1;
  bool value :1;
} _kv_rpc_service_update_args__isset;

class kv_rpc_service_update_args {
 public:

  kv_rpc_service_update_args(const kv_rpc_service_update_args&);
  kv_rpc_service_update_args& operator=(const kv_rpc_service_update_args&);
  kv_rpc_service_update_args() : block_id(0), key(), value() {
  }

  virtual ~kv_rpc_service_update_args() throw();
  int32_t block_id;
  std::string key;
  std::string value;

  _kv_rpc_service_update_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const kv_rpc_service_update_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_update_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_rpc_service_update_pargs {
 public:


  virtual ~kv_rpc_service_update_pargs() throw();
  const int32_t* block_id;
  const std::string* key;
  const std::string* value;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_update_result__isset {
  _kv_rpc_service_update_result__isset() : ex(false) {}
  bool ex :1;
} _kv_rpc_service_update_result__isset;

class kv_rpc_service_update_result {
 public:

  kv_rpc_service_update_result(const kv_rpc_service_update_result&);
  kv_rpc_service_update_result& operator=(const kv_rpc_service_update_result&);
  kv_rpc_service_update_result() {
  }

  virtual ~kv_rpc_service_update_result() throw();
  kv_rpc_exception ex;

  _kv_rpc_service_update_result__isset __isset;

  void __set_ex(const kv_rpc_exception& val);

  bool operator == (const kv_rpc_service_update_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_update_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_update_presult__isset {
  _kv_rpc_service_update_presult__isset() : ex(false) {}
  bool ex :1;
} _kv_rpc_service_update_presult__isset;

class kv_rpc_service_update_presult {
 public:


  virtual ~kv_rpc_service_update_presult() throw();
  kv_rpc_exception ex;

  _kv_rpc_service_update_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _kv_rpc_service_remove_args__isset {
  _kv_rpc_service_remove_args__isset() : block_id(false), key(false) {}
  bool block_id :1;
  bool key :1;
} _kv_rpc_service_remove_args__isset;

class kv_rpc_service_remove_args {
 public:

  kv_rpc_service_remove_args(const kv_rpc_service_remove_args&);
  kv_rpc_service_remove_args& operator=(const kv_rpc_service_remove_args&);
  kv_rpc_service_remove_args() : block_id(0), key() {
  }

  virtual ~kv_rpc_service_remove_args() throw();
  int32_t block_id;
  std::string key;

  _kv_rpc_service_remove_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const kv_rpc_service_remove_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_remove_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_rpc_service_remove_pargs {
 public:


  virtual ~kv_rpc_service_remove_pargs() throw();
  const int32_t* block_id;
  const std::string* key;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_remove_result__isset {
  _kv_rpc_service_remove_result__isset() : ex(false) {}
  bool ex :1;
} _kv_rpc_service_remove_result__isset;

class kv_rpc_service_remove_result {
 public:

  kv_rpc_service_remove_result(const kv_rpc_service_remove_result&);
  kv_rpc_service_remove_result& operator=(const kv_rpc_service_remove_result&);
  kv_rpc_service_remove_result() {
  }

  virtual ~kv_rpc_service_remove_result() throw();
  kv_rpc_exception ex;

  _kv_rpc_service_remove_result__isset __isset;

  void __set_ex(const kv_rpc_exception& val);

  bool operator == (const kv_rpc_service_remove_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_remove_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_remove_presult__isset {
  _kv_rpc_service_remove_presult__isset() : ex(false) {}
  bool ex :1;
} _kv_rpc_service_remove_presult__isset;

class kv_rpc_service_remove_presult {
 public:


  virtual ~kv_rpc_service_remove_presult() throw();
  kv_rpc_exception ex;

  _kv_rpc_service_remove_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _kv_rpc_service_size_args__isset {
  _kv_rpc_service_size_args__isset() : block_id(false) {}
  bool block_id :1;
} _kv_rpc_service_size_args__isset;

class kv_rpc_service_size_args {
 public:

  kv_rpc_service_size_args(const kv_rpc_service_size_args&);
  kv_rpc_service_size_args& operator=(const kv_rpc_service_size_args&);
  kv_rpc_service_size_args() : block_id(0) {
  }

  virtual ~kv_rpc_service_size_args() throw();
  int32_t block_id;

  _kv_rpc_service_size_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const kv_rpc_service_size_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_size_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_rpc_service_size_pargs {
 public:


  virtual ~kv_rpc_service_size_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_size_result__isset {
  _kv_rpc_service_size_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_rpc_service_size_result__isset;

class kv_rpc_service_size_result {
 public:

  kv_rpc_service_size_result(const kv_rpc_service_size_result&);
  kv_rpc_service_size_result& operator=(const kv_rpc_service_size_result&);
  kv_rpc_service_size_result() : success(0) {
  }

  virtual ~kv_rpc_service_size_result() throw();
  int64_t success;
  kv_rpc_exception ex;

  _kv_rpc_service_size_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const kv_rpc_exception& val);

  bool operator == (const kv_rpc_service_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_rpc_service_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_rpc_service_size_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_rpc_service_size_presult__isset {
  _kv_rpc_service_size_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_rpc_service_size_presult__isset;

class kv_rpc_service_size_presult {
 public:


  virtual ~kv_rpc_service_size_presult() throw();
  int64_t* success;
  kv_rpc_exception ex;

  _kv_rpc_service_size_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class kv_rpc_serviceClientT : virtual public kv_rpc_serviceIf {
 public:
  kv_rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  kv_rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void put(const int32_t block_id, const std::string& key, const std::string& value);
  void send_put(const int32_t block_id, const std::string& key, const std::string& value);
  void recv_put();
  void get(std::string& _return, const int32_t block_id, const std::string& key);
  void send_get(const int32_t block_id, const std::string& key);
  void recv_get(std::string& _return);
  void update(const int32_t block_id, const std::string& key, const std::string& value);
  void send_update(const int32_t block_id, const std::string& key, const std::string& value);
  void recv_update();
  void remove(const int32_t block_id, const std::string& key);
  void send_remove(const int32_t block_id, const std::string& key);
  void recv_remove();
  int64_t size(const int32_t block_id);
  void send_size(const int32_t block_id);
  int64_t recv_size();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef kv_rpc_serviceClientT< ::apache::thrift::protocol::TProtocol> kv_rpc_serviceClient;

template <class Protocol_>
class kv_rpc_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (kv_rpc_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (kv_rpc_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_size(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  kv_rpc_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf> iface) :
    iface_(iface) {
    processMap_["put"] = ProcessFunctions(
      &kv_rpc_serviceProcessorT::process_put,
      &kv_rpc_serviceProcessorT::process_put);
    processMap_["get"] = ProcessFunctions(
      &kv_rpc_serviceProcessorT::process_get,
      &kv_rpc_serviceProcessorT::process_get);
    processMap_["update"] = ProcessFunctions(
      &kv_rpc_serviceProcessorT::process_update,
      &kv_rpc_serviceProcessorT::process_update);
    processMap_["remove"] = ProcessFunctions(
      &kv_rpc_serviceProcessorT::process_remove,
      &kv_rpc_serviceProcessorT::process_remove);
    processMap_["size"] = ProcessFunctions(
      &kv_rpc_serviceProcessorT::process_size,
      &kv_rpc_serviceProcessorT::process_size);
  }

  virtual ~kv_rpc_serviceProcessorT() {}
};

typedef kv_rpc_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > kv_rpc_serviceProcessor;

template <class Protocol_>
class kv_rpc_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  kv_rpc_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< kv_rpc_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< kv_rpc_serviceIfFactory > handlerFactory_;
};

typedef kv_rpc_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > kv_rpc_serviceProcessorFactory;

class kv_rpc_serviceMultiface : virtual public kv_rpc_serviceIf {
 public:
  kv_rpc_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~kv_rpc_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf> > ifaces_;
  kv_rpc_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<kv_rpc_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put(const int32_t block_id, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(block_id, key, value);
    }
    ifaces_[i]->put(block_id, key, value);
  }

  void get(std::string& _return, const int32_t block_id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, block_id, key);
    }
    ifaces_[i]->get(_return, block_id, key);
    return;
  }

  void update(const int32_t block_id, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(block_id, key, value);
    }
    ifaces_[i]->update(block_id, key, value);
  }

  void remove(const int32_t block_id, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(block_id, key);
    }
    ifaces_[i]->remove(block_id, key);
  }

  int64_t size(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->size(block_id);
    }
    return ifaces_[i]->size(block_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class kv_rpc_serviceConcurrentClientT : virtual public kv_rpc_serviceIf {
 public:
  kv_rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  kv_rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void put(const int32_t block_id, const std::string& key, const std::string& value);
  int32_t send_put(const int32_t block_id, const std::string& key, const std::string& value);
  void recv_put(const int32_t seqid);
  void get(std::string& _return, const int32_t block_id, const std::string& key);
  int32_t send_get(const int32_t block_id, const std::string& key);
  void recv_get(std::string& _return, const int32_t seqid);
  void update(const int32_t block_id, const std::string& key, const std::string& value);
  int32_t send_update(const int32_t block_id, const std::string& key, const std::string& value);
  void recv_update(const int32_t seqid);
  void remove(const int32_t block_id, const std::string& key);
  int32_t send_remove(const int32_t block_id, const std::string& key);
  void recv_remove(const int32_t seqid);
  int64_t size(const int32_t block_id);
  int32_t send_size(const int32_t block_id);
  int64_t recv_size(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef kv_rpc_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> kv_rpc_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "kv_rpc_service.tcc"
#include "kv_rpc_service_types.tcc"

#endif
