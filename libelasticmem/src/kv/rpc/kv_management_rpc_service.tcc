/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "kv_management_rpc_service.h"
#ifndef kv_management_rpc_service_TCC
#define kv_management_rpc_service_TCC

namespace elasticmem {
namespace kv {

template<class Protocol_>
uint32_t kv_management_rpc_service_flush_args::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->persistent_store_prefix);
          this->__isset.persistent_store_prefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_flush_args::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_flush_args");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("persistent_store_prefix", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->persistent_store_prefix);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_flush_pargs::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_flush_pargs");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("persistent_store_prefix", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->persistent_store_prefix)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->path)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_flush_result::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_flush_result::write(Protocol_ *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("kv_management_rpc_service_flush_result");

  if (this->__isset.ex) {
    xfer += oprot->writeFieldBegin("ex", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ex.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_flush_presult::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_load_args::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->persistent_store_prefix);
          this->__isset.persistent_store_prefix = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_load_args::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_load_args");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("persistent_store_prefix", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->persistent_store_prefix);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_load_pargs::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_load_pargs");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("persistent_store_prefix", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->persistent_store_prefix)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString((*(this->path)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_load_result::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_load_result::write(Protocol_ *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("kv_management_rpc_service_load_result");

  if (this->__isset.ex) {
    xfer += oprot->writeFieldBegin("ex", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ex.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_load_presult::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_clear_args::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_clear_args::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_clear_args");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_clear_pargs::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_clear_pargs");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_clear_result::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_clear_result::write(Protocol_ *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("kv_management_rpc_service_clear_result");

  if (this->__isset.ex) {
    xfer += oprot->writeFieldBegin("ex", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ex.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_clear_presult::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_capacity_args::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_capacity_args::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_storage_capacity_args");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_capacity_pargs::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_storage_capacity_pargs");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_capacity_result::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_capacity_result::write(Protocol_ *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("kv_management_rpc_service_storage_capacity_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ex) {
    xfer += oprot->writeFieldBegin("ex", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ex.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_capacity_presult::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_size_args::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->block_id);
          this->__isset.block_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_size_args::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_storage_size_args");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->block_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_size_pargs::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("kv_management_rpc_service_storage_size_pargs");

  xfer += oprot->writeFieldBegin("block_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->block_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_size_result::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_size_result::write(Protocol_ *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("kv_management_rpc_service_storage_size_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ex) {
    xfer += oprot->writeFieldBegin("ex", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ex.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t kv_management_rpc_service_storage_size_presult::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::flush(const int32_t block_id,
                                                        const std::string &persistent_store_prefix,
                                                        const std::string &path) {
  send_flush(block_id, persistent_store_prefix, path);
  recv_flush();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::send_flush(const int32_t block_id,
                                                             const std::string &persistent_store_prefix,
                                                             const std::string &path) {
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("flush", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_flush_pargs args;
  args.block_id = &block_id;
  args.persistent_store_prefix = &persistent_store_prefix;
  args.path = &path;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::recv_flush() {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("flush") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  kv_management_rpc_service_flush_presult result;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.ex) {
    throw result.ex;
  }
  return;
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::load(const int32_t block_id,
                                                       const std::string &persistent_store_prefix,
                                                       const std::string &path) {
  send_load(block_id, persistent_store_prefix, path);
  recv_load();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::send_load(const int32_t block_id,
                                                            const std::string &persistent_store_prefix,
                                                            const std::string &path) {
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("load", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_load_pargs args;
  args.block_id = &block_id;
  args.persistent_store_prefix = &persistent_store_prefix;
  args.path = &path;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::recv_load() {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("load") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  kv_management_rpc_service_load_presult result;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.ex) {
    throw result.ex;
  }
  return;
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::clear(const int32_t block_id) {
  send_clear(block_id);
  recv_clear();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::send_clear(const int32_t block_id) {
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("clear", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_clear_pargs args;
  args.block_id = &block_id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::recv_clear() {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("clear") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  kv_management_rpc_service_clear_presult result;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.ex) {
    throw result.ex;
  }
  return;
}

template<class Protocol_>
int64_t kv_management_rpc_serviceClientT<Protocol_>::storage_capacity(const int32_t block_id) {
  send_storage_capacity(block_id);
  return recv_storage_capacity();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::send_storage_capacity(const int32_t block_id) {
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("storage_capacity", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_storage_capacity_pargs args;
  args.block_id = &block_id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template<class Protocol_>
int64_t kv_management_rpc_serviceClientT<Protocol_>::recv_storage_capacity() {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("storage_capacity") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  kv_management_rpc_service_storage_capacity_presult result;
  result.success = &_return;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ex) {
    throw result.ex;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT,
                                                "storage_capacity failed: unknown result");
}

template<class Protocol_>
int64_t kv_management_rpc_serviceClientT<Protocol_>::storage_size(const int32_t block_id) {
  send_storage_size(block_id);
  return recv_storage_size();
}

template<class Protocol_>
void kv_management_rpc_serviceClientT<Protocol_>::send_storage_size(const int32_t block_id) {
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("storage_size", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_storage_size_pargs args;
  args.block_id = &block_id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template<class Protocol_>
int64_t kv_management_rpc_serviceClientT<Protocol_>::recv_storage_size() {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("storage_size") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  kv_management_rpc_service_storage_size_presult result;
  result.success = &_return;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  if (result.__isset.ex) {
    throw result.ex;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT,
                                                "storage_size failed: unknown result");
}

template<class Protocol_>
bool kv_management_rpc_serviceProcessorT<Protocol_>::dispatchCall(::apache::thrift::protocol::TProtocol *iprot,
                                                                  ::apache::thrift::protocol::TProtocol *oprot,
                                                                  const std::string &fname,
                                                                  int32_t seqid,
                                                                  void *callContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException
        x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second.generic))(seqid, iprot, oprot, callContext);
  return true;
}

template<class Protocol_>
bool kv_management_rpc_serviceProcessorT<Protocol_>::dispatchCallTemplated(Protocol_ *iprot,
                                                                           Protocol_ *oprot,
                                                                           const std::string &fname,
                                                                           int32_t seqid,
                                                                           void *callContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException
        x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second.specialized))(seqid, iprot, oprot, callContext);
  return true;
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_flush(int32_t seqid,
                                                                   ::apache::thrift::protocol::TProtocol *iprot,
                                                                   ::apache::thrift::protocol::TProtocol *oprot,
                                                                   void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.flush", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.flush");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.flush");
  }

  kv_management_rpc_service_flush_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.flush", bytes);
  }

  kv_management_rpc_service_flush_result result;
  try {
    iface_->flush(args.block_id, args.persistent_store_prefix, args.path);
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.flush");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("flush", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.flush");
  }

  oprot->writeMessageBegin("flush", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.flush", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_flush(int32_t seqid,
                                                                   Protocol_ *iprot,
                                                                   Protocol_ *oprot,
                                                                   void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.flush", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.flush");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.flush");
  }

  kv_management_rpc_service_flush_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.flush", bytes);
  }

  kv_management_rpc_service_flush_result result;
  try {
    iface_->flush(args.block_id, args.persistent_store_prefix, args.path);
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.flush");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("flush", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.flush");
  }

  oprot->writeMessageBegin("flush", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.flush", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_load(int32_t seqid,
                                                                  ::apache::thrift::protocol::TProtocol *iprot,
                                                                  ::apache::thrift::protocol::TProtocol *oprot,
                                                                  void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.load", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.load");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.load");
  }

  kv_management_rpc_service_load_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.load", bytes);
  }

  kv_management_rpc_service_load_result result;
  try {
    iface_->load(args.block_id, args.persistent_store_prefix, args.path);
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.load");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("load", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.load");
  }

  oprot->writeMessageBegin("load", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.load", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_load(int32_t seqid,
                                                                  Protocol_ *iprot,
                                                                  Protocol_ *oprot,
                                                                  void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.load", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.load");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.load");
  }

  kv_management_rpc_service_load_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.load", bytes);
  }

  kv_management_rpc_service_load_result result;
  try {
    iface_->load(args.block_id, args.persistent_store_prefix, args.path);
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.load");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("load", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.load");
  }

  oprot->writeMessageBegin("load", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.load", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_clear(int32_t seqid,
                                                                   ::apache::thrift::protocol::TProtocol *iprot,
                                                                   ::apache::thrift::protocol::TProtocol *oprot,
                                                                   void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.clear", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.clear");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.clear");
  }

  kv_management_rpc_service_clear_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.clear", bytes);
  }

  kv_management_rpc_service_clear_result result;
  try {
    iface_->clear(args.block_id);
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.clear");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("clear", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.clear");
  }

  oprot->writeMessageBegin("clear", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.clear", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_clear(int32_t seqid,
                                                                   Protocol_ *iprot,
                                                                   Protocol_ *oprot,
                                                                   void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.clear", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.clear");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.clear");
  }

  kv_management_rpc_service_clear_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.clear", bytes);
  }

  kv_management_rpc_service_clear_result result;
  try {
    iface_->clear(args.block_id);
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.clear");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("clear", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.clear");
  }

  oprot->writeMessageBegin("clear", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.clear", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_storage_capacity(int32_t seqid,
                                                                              ::apache::thrift::protocol::TProtocol *iprot,
                                                                              ::apache::thrift::protocol::TProtocol *oprot,
                                                                              void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.storage_capacity", callContext);
  }
  ::apache::thrift::TProcessorContextFreer
      freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.storage_capacity");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.storage_capacity");
  }

  kv_management_rpc_service_storage_capacity_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.storage_capacity", bytes);
  }

  kv_management_rpc_service_storage_capacity_result result;
  try {
    result.success = iface_->storage_capacity(args.block_id);
    result.__isset.success = true;
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.storage_capacity");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("storage_capacity", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.storage_capacity");
  }

  oprot->writeMessageBegin("storage_capacity", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.storage_capacity", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_storage_capacity(int32_t seqid,
                                                                              Protocol_ *iprot,
                                                                              Protocol_ *oprot,
                                                                              void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.storage_capacity", callContext);
  }
  ::apache::thrift::TProcessorContextFreer
      freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.storage_capacity");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.storage_capacity");
  }

  kv_management_rpc_service_storage_capacity_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.storage_capacity", bytes);
  }

  kv_management_rpc_service_storage_capacity_result result;
  try {
    result.success = iface_->storage_capacity(args.block_id);
    result.__isset.success = true;
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.storage_capacity");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("storage_capacity", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.storage_capacity");
  }

  oprot->writeMessageBegin("storage_capacity", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.storage_capacity", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_storage_size(int32_t seqid,
                                                                          ::apache::thrift::protocol::TProtocol *iprot,
                                                                          ::apache::thrift::protocol::TProtocol *oprot,
                                                                          void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.storage_size", callContext);
  }
  ::apache::thrift::TProcessorContextFreer
      freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.storage_size");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.storage_size");
  }

  kv_management_rpc_service_storage_size_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.storage_size", bytes);
  }

  kv_management_rpc_service_storage_size_result result;
  try {
    result.success = iface_->storage_size(args.block_id);
    result.__isset.success = true;
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.storage_size");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("storage_size", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.storage_size");
  }

  oprot->writeMessageBegin("storage_size", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.storage_size", bytes);
  }
}

template<class Protocol_>
void kv_management_rpc_serviceProcessorT<Protocol_>::process_storage_size(int32_t seqid,
                                                                          Protocol_ *iprot,
                                                                          Protocol_ *oprot,
                                                                          void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("kv_management_rpc_service.storage_size", callContext);
  }
  ::apache::thrift::TProcessorContextFreer
      freer(this->eventHandler_.get(), ctx, "kv_management_rpc_service.storage_size");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "kv_management_rpc_service.storage_size");
  }

  kv_management_rpc_service_storage_size_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "kv_management_rpc_service.storage_size", bytes);
  }

  kv_management_rpc_service_storage_size_result result;
  try {
    result.success = iface_->storage_size(args.block_id);
    result.__isset.success = true;
  } catch (kv_management_rpc_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "kv_management_rpc_service.storage_size");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("storage_size", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "kv_management_rpc_service.storage_size");
  }

  oprot->writeMessageBegin("storage_size", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "kv_management_rpc_service.storage_size", bytes);
  }
}

template<class Protocol_>
::apache::thrift::stdcxx::shared_ptr<::apache::thrift::TProcessor> kv_management_rpc_serviceProcessorFactoryT<Protocol_>::getProcessor(
    const ::apache::thrift::TConnectionInfo &connInfo) {
  ::apache::thrift::ReleaseHandler<kv_management_rpc_serviceIfFactory> cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf>
      handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr<::apache::thrift::TProcessor>
      processor(new kv_management_rpc_serviceProcessorT<Protocol_>(handler));
  return processor;
}

template<class Protocol_>
void kv_management_rpc_serviceConcurrentClientT<Protocol_>::flush(const int32_t block_id,
                                                                  const std::string &persistent_store_prefix,
                                                                  const std::string &path) {
  int32_t seqid = send_flush(block_id, persistent_store_prefix, path);
  recv_flush(seqid);
}

template<class Protocol_>
int32_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::send_flush(const int32_t block_id,
                                                                          const std::string &persistent_store_prefix,
                                                                          const std::string &path) {
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("flush", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_flush_pargs args;
  args.block_id = &block_id;
  args.persistent_store_prefix = &persistent_store_prefix;
  args.path = &path;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template<class Protocol_>
void kv_management_rpc_serviceConcurrentClientT<Protocol_>::recv_flush(const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while (true) {
    if (!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("flush") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      kv_management_rpc_service_flush_presult result;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.ex) {
        sentry.commit();
        throw result.ex;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

template<class Protocol_>
void kv_management_rpc_serviceConcurrentClientT<Protocol_>::load(const int32_t block_id,
                                                                 const std::string &persistent_store_prefix,
                                                                 const std::string &path) {
  int32_t seqid = send_load(block_id, persistent_store_prefix, path);
  recv_load(seqid);
}

template<class Protocol_>
int32_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::send_load(const int32_t block_id,
                                                                         const std::string &persistent_store_prefix,
                                                                         const std::string &path) {
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("load", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_load_pargs args;
  args.block_id = &block_id;
  args.persistent_store_prefix = &persistent_store_prefix;
  args.path = &path;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template<class Protocol_>
void kv_management_rpc_serviceConcurrentClientT<Protocol_>::recv_load(const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while (true) {
    if (!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("load") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      kv_management_rpc_service_load_presult result;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.ex) {
        sentry.commit();
        throw result.ex;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

template<class Protocol_>
void kv_management_rpc_serviceConcurrentClientT<Protocol_>::clear(const int32_t block_id) {
  int32_t seqid = send_clear(block_id);
  recv_clear(seqid);
}

template<class Protocol_>
int32_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::send_clear(const int32_t block_id) {
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("clear", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_clear_pargs args;
  args.block_id = &block_id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template<class Protocol_>
void kv_management_rpc_serviceConcurrentClientT<Protocol_>::recv_clear(const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while (true) {
    if (!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("clear") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      kv_management_rpc_service_clear_presult result;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.ex) {
        sentry.commit();
        throw result.ex;
      }
      sentry.commit();
      return;
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

template<class Protocol_>
int64_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::storage_capacity(const int32_t block_id) {
  int32_t seqid = send_storage_capacity(block_id);
  return recv_storage_capacity(seqid);
}

template<class Protocol_>
int32_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::send_storage_capacity(const int32_t block_id) {
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("storage_capacity", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_storage_capacity_pargs args;
  args.block_id = &block_id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template<class Protocol_>
int64_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::recv_storage_capacity(const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while (true) {
    if (!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("storage_capacity") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int64_t _return;
      kv_management_rpc_service_storage_capacity_presult result;
      result.success = &_return;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      if (result.__isset.ex) {
        sentry.commit();
        throw result.ex;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT,
                                                    "storage_capacity failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

template<class Protocol_>
int64_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::storage_size(const int32_t block_id) {
  int32_t seqid = send_storage_size(block_id);
  return recv_storage_size(seqid);
}

template<class Protocol_>
int32_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::send_storage_size(const int32_t block_id) {
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("storage_size", ::apache::thrift::protocol::T_CALL, cseqid);

  kv_management_rpc_service_storage_size_pargs args;
  args.block_id = &block_id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template<class Protocol_>
int64_t kv_management_rpc_serviceConcurrentClientT<Protocol_>::recv_storage_size(const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while (true) {
    if (!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("storage_size") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      int64_t _return;
      kv_management_rpc_service_storage_size_presult result;
      result.success = &_return;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        sentry.commit();
        return _return;
      }
      if (result.__isset.ex) {
        sentry.commit();
        throw result.ex;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT,
                                                    "storage_size failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

}
} // namespace

#endif
