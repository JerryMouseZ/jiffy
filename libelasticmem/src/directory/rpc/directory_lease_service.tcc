/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "directory_lease_service.h"
#ifndef directory_lease_service_TCC
#define directory_lease_service_TCC

namespace elasticmem {
namespace directory {

template<class Protocol_>
uint32_t directory_lease_service_update_leases_args::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->updates.read(iprot);
          this->__isset.updates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t directory_lease_service_update_leases_args::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("directory_lease_service_update_leases_args");

  xfer += oprot->writeFieldBegin("updates", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->updates.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t directory_lease_service_update_leases_pargs::write(Protocol_ *oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("directory_lease_service_update_leases_pargs");

  xfer += oprot->writeFieldBegin("updates", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += (*(this->updates)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t directory_lease_service_update_leases_result::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->success.read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
uint32_t directory_lease_service_update_leases_result::write(Protocol_ *oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("directory_lease_service_update_leases_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_STRUCT, 0);
    xfer += this->success.write(oprot);
    xfer += oprot->writeFieldEnd();
  } else if (this->__isset.ex) {
    xfer += oprot->writeFieldBegin("ex", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ex.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template<class Protocol_>
uint32_t directory_lease_service_update_leases_presult::read(Protocol_ *iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += (*(this->success)).read(iprot);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ex.read(iprot);
          this->__isset.ex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template<class Protocol_>
void directory_lease_serviceClientT<Protocol_>::update_leases(rpc_lease_ack &_return, const rpc_lease_update &updates) {
  send_update_leases(updates);
  recv_update_leases(_return);
}

template<class Protocol_>
void directory_lease_serviceClientT<Protocol_>::send_update_leases(const rpc_lease_update &updates) {
  int32_t cseqid = 0;
  this->oprot_->writeMessageBegin("update_leases", ::apache::thrift::protocol::T_CALL, cseqid);

  directory_lease_service_update_leases_pargs args;
  args.updates = &updates;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
}

template<class Protocol_>
void directory_lease_serviceClientT<Protocol_>::recv_update_leases(rpc_lease_ack &_return) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  this->iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(this->iprot_);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  if (fname.compare("update_leases") != 0) {
    this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    this->iprot_->readMessageEnd();
    this->iprot_->getTransport()->readEnd();
  }
  directory_lease_service_update_leases_presult result;
  result.success = &_return;
  result.read(this->iprot_);
  this->iprot_->readMessageEnd();
  this->iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    // _return pointer has now been filled
    return;
  }
  if (result.__isset.ex) {
    throw result.ex;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT,
                                                "update_leases failed: unknown result");
}

template<class Protocol_>
bool directory_lease_serviceProcessorT<Protocol_>::dispatchCall(::apache::thrift::protocol::TProtocol *iprot,
                                                                ::apache::thrift::protocol::TProtocol *oprot,
                                                                const std::string &fname,
                                                                int32_t seqid,
                                                                void *callContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException
        x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second.generic))(seqid, iprot, oprot, callContext);
  return true;
}

template<class Protocol_>
bool directory_lease_serviceProcessorT<Protocol_>::dispatchCallTemplated(Protocol_ *iprot,
                                                                         Protocol_ *oprot,
                                                                         const std::string &fname,
                                                                         int32_t seqid,
                                                                         void *callContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException
        x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '" + fname + "'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second.specialized))(seqid, iprot, oprot, callContext);
  return true;
}

template<class Protocol_>
void directory_lease_serviceProcessorT<Protocol_>::process_update_leases(int32_t seqid,
                                                                         ::apache::thrift::protocol::TProtocol *iprot,
                                                                         ::apache::thrift::protocol::TProtocol *oprot,
                                                                         void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("directory_lease_service.update_leases", callContext);
  }
  ::apache::thrift::TProcessorContextFreer
      freer(this->eventHandler_.get(), ctx, "directory_lease_service.update_leases");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "directory_lease_service.update_leases");
  }

  directory_lease_service_update_leases_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "directory_lease_service.update_leases", bytes);
  }

  directory_lease_service_update_leases_result result;
  try {
    iface_->update_leases(result.success, args.updates);
    result.__isset.success = true;
  } catch (directory_lease_service_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "directory_lease_service.update_leases");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_leases", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "directory_lease_service.update_leases");
  }

  oprot->writeMessageBegin("update_leases", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "directory_lease_service.update_leases", bytes);
  }
}

template<class Protocol_>
void directory_lease_serviceProcessorT<Protocol_>::process_update_leases(int32_t seqid,
                                                                         Protocol_ *iprot,
                                                                         Protocol_ *oprot,
                                                                         void *callContext) {
  void *ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("directory_lease_service.update_leases", callContext);
  }
  ::apache::thrift::TProcessorContextFreer
      freer(this->eventHandler_.get(), ctx, "directory_lease_service.update_leases");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "directory_lease_service.update_leases");
  }

  directory_lease_service_update_leases_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "directory_lease_service.update_leases", bytes);
  }

  directory_lease_service_update_leases_result result;
  try {
    iface_->update_leases(result.success, args.updates);
    result.__isset.success = true;
  } catch (directory_lease_service_exception &ex) {
    result.ex = ex;
    result.__isset.ex = true;
  } catch (const std::exception &e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "directory_lease_service.update_leases");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("update_leases", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "directory_lease_service.update_leases");
  }

  oprot->writeMessageBegin("update_leases", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "directory_lease_service.update_leases", bytes);
  }
}

template<class Protocol_>
::apache::thrift::stdcxx::shared_ptr<::apache::thrift::TProcessor> directory_lease_serviceProcessorFactoryT<Protocol_>::getProcessor(
    const ::apache::thrift::TConnectionInfo &connInfo) {
  ::apache::thrift::ReleaseHandler<directory_lease_serviceIfFactory> cleanup(handlerFactory_);
  ::apache::thrift::stdcxx::shared_ptr<directory_lease_serviceIf>
      handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::apache::thrift::stdcxx::shared_ptr<::apache::thrift::TProcessor>
      processor(new directory_lease_serviceProcessorT<Protocol_>(handler));
  return processor;
}

template<class Protocol_>
void directory_lease_serviceConcurrentClientT<Protocol_>::update_leases(rpc_lease_ack &_return,
                                                                        const rpc_lease_update &updates) {
  int32_t seqid = send_update_leases(updates);
  recv_update_leases(_return, seqid);
}

template<class Protocol_>
int32_t directory_lease_serviceConcurrentClientT<Protocol_>::send_update_leases(const rpc_lease_update &updates) {
  int32_t cseqid = this->sync_.generateSeqId();
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  this->oprot_->writeMessageBegin("update_leases", ::apache::thrift::protocol::T_CALL, cseqid);

  directory_lease_service_update_leases_pargs args;
  args.updates = &updates;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();

  sentry.commit();
  return cseqid;
}

template<class Protocol_>
void directory_lease_serviceConcurrentClientT<Protocol_>::recv_update_leases(rpc_lease_ack &_return,
                                                                             const int32_t seqid) {

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  // the read mutex gets dropped and reacquired as part of waitForWork()
  // The destructor of this sentry wakes up other clients
  ::apache::thrift::async::TConcurrentRecvSentry sentry(&this->sync_, seqid);

  while (true) {
    if (!this->sync_.getPending(fname, mtype, rseqid)) {
      this->iprot_->readMessageBegin(fname, mtype, rseqid);
    }
    if (seqid == rseqid) {
      if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
        ::apache::thrift::TApplicationException x;
        x.read(this->iprot_);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
        sentry.commit();
        throw x;
      }
      if (mtype != ::apache::thrift::protocol::T_REPLY) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();
      }
      if (fname.compare("update_leases") != 0) {
        this->iprot_->skip(::apache::thrift::protocol::T_STRUCT);
        this->iprot_->readMessageEnd();
        this->iprot_->getTransport()->readEnd();

        // in a bad state, don't commit
        using ::apache::thrift::protocol::TProtocolException;
        throw TProtocolException(TProtocolException::INVALID_DATA);
      }
      directory_lease_service_update_leases_presult result;
      result.success = &_return;
      result.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();

      if (result.__isset.success) {
        // _return pointer has now been filled
        sentry.commit();
        return;
      }
      if (result.__isset.ex) {
        sentry.commit();
        throw result.ex;
      }
      // in a bad state, don't commit
      throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT,
                                                    "update_leases failed: unknown result");
    }
    // seqid != rseqid
    this->sync_.updatePending(fname, mtype, rseqid);

    // this will temporarily unlock the readMutex, and let other clients get work done
    this->sync_.waitForWork(seqid);
  } // end while(true)
}

}
} // namespace

#endif
