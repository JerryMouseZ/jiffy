/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef kv_management_rpc_service_H
#define kv_management_rpc_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "kv_service_types.h"

namespace elasticmem { namespace kv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class kv_management_rpc_serviceIf {
 public:
  virtual ~kv_management_rpc_serviceIf() {}
  virtual void clear() = 0;
  virtual int64_t size() = 0;
  virtual int64_t capacity() = 0;
  virtual int64_t num_entries() = 0;
};

class kv_management_rpc_serviceIfFactory {
 public:
  typedef kv_management_rpc_serviceIf Handler;

  virtual ~kv_management_rpc_serviceIfFactory() {}

  virtual kv_management_rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(kv_management_rpc_serviceIf* /* handler */) = 0;
};

class kv_management_rpc_serviceIfSingletonFactory : virtual public kv_management_rpc_serviceIfFactory {
 public:
  kv_management_rpc_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf>& iface) : iface_(iface) {}
  virtual ~kv_management_rpc_serviceIfSingletonFactory() {}

  virtual kv_management_rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(kv_management_rpc_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf> iface_;
};

class kv_management_rpc_serviceNull : virtual public kv_management_rpc_serviceIf {
 public:
  virtual ~kv_management_rpc_serviceNull() {}
  void clear() {
    return;
  }
  int64_t size() {
    int64_t _return = 0;
    return _return;
  }
  int64_t capacity() {
    int64_t _return = 0;
    return _return;
  }
  int64_t num_entries() {
    int64_t _return = 0;
    return _return;
  }
};


class kv_management_rpc_service_clear_args {
 public:

  kv_management_rpc_service_clear_args(const kv_management_rpc_service_clear_args&);
  kv_management_rpc_service_clear_args& operator=(const kv_management_rpc_service_clear_args&);
  kv_management_rpc_service_clear_args() {
  }

  virtual ~kv_management_rpc_service_clear_args() throw();

  bool operator == (const kv_management_rpc_service_clear_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kv_management_rpc_service_clear_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_clear_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_management_rpc_service_clear_pargs {
 public:


  virtual ~kv_management_rpc_service_clear_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_clear_result__isset {
  _kv_management_rpc_service_clear_result__isset() : ex(false) {}
  bool ex :1;
} _kv_management_rpc_service_clear_result__isset;

class kv_management_rpc_service_clear_result {
 public:

  kv_management_rpc_service_clear_result(const kv_management_rpc_service_clear_result&);
  kv_management_rpc_service_clear_result& operator=(const kv_management_rpc_service_clear_result&);
  kv_management_rpc_service_clear_result() {
  }

  virtual ~kv_management_rpc_service_clear_result() throw();
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_clear_result__isset __isset;

  void __set_ex(const kv_management_rpc_exception& val);

  bool operator == (const kv_management_rpc_service_clear_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_management_rpc_service_clear_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_clear_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_clear_presult__isset {
  _kv_management_rpc_service_clear_presult__isset() : ex(false) {}
  bool ex :1;
} _kv_management_rpc_service_clear_presult__isset;

class kv_management_rpc_service_clear_presult {
 public:


  virtual ~kv_management_rpc_service_clear_presult() throw();
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_clear_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class kv_management_rpc_service_size_args {
 public:

  kv_management_rpc_service_size_args(const kv_management_rpc_service_size_args&);
  kv_management_rpc_service_size_args& operator=(const kv_management_rpc_service_size_args&);
  kv_management_rpc_service_size_args() {
  }

  virtual ~kv_management_rpc_service_size_args() throw();

  bool operator == (const kv_management_rpc_service_size_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kv_management_rpc_service_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_size_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_management_rpc_service_size_pargs {
 public:


  virtual ~kv_management_rpc_service_size_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_size_result__isset {
  _kv_management_rpc_service_size_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_management_rpc_service_size_result__isset;

class kv_management_rpc_service_size_result {
 public:

  kv_management_rpc_service_size_result(const kv_management_rpc_service_size_result&);
  kv_management_rpc_service_size_result& operator=(const kv_management_rpc_service_size_result&);
  kv_management_rpc_service_size_result() : success(0) {
  }

  virtual ~kv_management_rpc_service_size_result() throw();
  int64_t success;
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_size_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const kv_management_rpc_exception& val);

  bool operator == (const kv_management_rpc_service_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_management_rpc_service_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_size_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_size_presult__isset {
  _kv_management_rpc_service_size_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_management_rpc_service_size_presult__isset;

class kv_management_rpc_service_size_presult {
 public:


  virtual ~kv_management_rpc_service_size_presult() throw();
  int64_t* success;
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_size_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class kv_management_rpc_service_capacity_args {
 public:

  kv_management_rpc_service_capacity_args(const kv_management_rpc_service_capacity_args&);
  kv_management_rpc_service_capacity_args& operator=(const kv_management_rpc_service_capacity_args&);
  kv_management_rpc_service_capacity_args() {
  }

  virtual ~kv_management_rpc_service_capacity_args() throw();

  bool operator == (const kv_management_rpc_service_capacity_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kv_management_rpc_service_capacity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_capacity_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_management_rpc_service_capacity_pargs {
 public:


  virtual ~kv_management_rpc_service_capacity_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_capacity_result__isset {
  _kv_management_rpc_service_capacity_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_management_rpc_service_capacity_result__isset;

class kv_management_rpc_service_capacity_result {
 public:

  kv_management_rpc_service_capacity_result(const kv_management_rpc_service_capacity_result&);
  kv_management_rpc_service_capacity_result& operator=(const kv_management_rpc_service_capacity_result&);
  kv_management_rpc_service_capacity_result() : success(0) {
  }

  virtual ~kv_management_rpc_service_capacity_result() throw();
  int64_t success;
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_capacity_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const kv_management_rpc_exception& val);

  bool operator == (const kv_management_rpc_service_capacity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_management_rpc_service_capacity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_capacity_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_capacity_presult__isset {
  _kv_management_rpc_service_capacity_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_management_rpc_service_capacity_presult__isset;

class kv_management_rpc_service_capacity_presult {
 public:


  virtual ~kv_management_rpc_service_capacity_presult() throw();
  int64_t* success;
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_capacity_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};


class kv_management_rpc_service_num_entries_args {
 public:

  kv_management_rpc_service_num_entries_args(const kv_management_rpc_service_num_entries_args&);
  kv_management_rpc_service_num_entries_args& operator=(const kv_management_rpc_service_num_entries_args&);
  kv_management_rpc_service_num_entries_args() {
  }

  virtual ~kv_management_rpc_service_num_entries_args() throw();

  bool operator == (const kv_management_rpc_service_num_entries_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const kv_management_rpc_service_num_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_num_entries_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class kv_management_rpc_service_num_entries_pargs {
 public:


  virtual ~kv_management_rpc_service_num_entries_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_num_entries_result__isset {
  _kv_management_rpc_service_num_entries_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_management_rpc_service_num_entries_result__isset;

class kv_management_rpc_service_num_entries_result {
 public:

  kv_management_rpc_service_num_entries_result(const kv_management_rpc_service_num_entries_result&);
  kv_management_rpc_service_num_entries_result& operator=(const kv_management_rpc_service_num_entries_result&);
  kv_management_rpc_service_num_entries_result() : success(0) {
  }

  virtual ~kv_management_rpc_service_num_entries_result() throw();
  int64_t success;
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_num_entries_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const kv_management_rpc_exception& val);

  bool operator == (const kv_management_rpc_service_num_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const kv_management_rpc_service_num_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const kv_management_rpc_service_num_entries_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _kv_management_rpc_service_num_entries_presult__isset {
  _kv_management_rpc_service_num_entries_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _kv_management_rpc_service_num_entries_presult__isset;

class kv_management_rpc_service_num_entries_presult {
 public:


  virtual ~kv_management_rpc_service_num_entries_presult() throw();
  int64_t* success;
  kv_management_rpc_exception ex;

  _kv_management_rpc_service_num_entries_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class kv_management_rpc_serviceClientT : virtual public kv_management_rpc_serviceIf {
 public:
  kv_management_rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  kv_management_rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void clear();
  void send_clear();
  void recv_clear();
  int64_t size();
  void send_size();
  int64_t recv_size();
  int64_t capacity();
  void send_capacity();
  int64_t recv_capacity();
  int64_t num_entries();
  void send_num_entries();
  int64_t recv_num_entries();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef kv_management_rpc_serviceClientT< ::apache::thrift::protocol::TProtocol> kv_management_rpc_serviceClient;

template <class Protocol_>
class kv_management_rpc_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (kv_management_rpc_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (kv_management_rpc_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_size(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_capacity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_capacity(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_num_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_num_entries(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  kv_management_rpc_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf> iface) :
    iface_(iface) {
    processMap_["clear"] = ProcessFunctions(
      &kv_management_rpc_serviceProcessorT::process_clear,
      &kv_management_rpc_serviceProcessorT::process_clear);
    processMap_["size"] = ProcessFunctions(
      &kv_management_rpc_serviceProcessorT::process_size,
      &kv_management_rpc_serviceProcessorT::process_size);
    processMap_["capacity"] = ProcessFunctions(
      &kv_management_rpc_serviceProcessorT::process_capacity,
      &kv_management_rpc_serviceProcessorT::process_capacity);
    processMap_["num_entries"] = ProcessFunctions(
      &kv_management_rpc_serviceProcessorT::process_num_entries,
      &kv_management_rpc_serviceProcessorT::process_num_entries);
  }

  virtual ~kv_management_rpc_serviceProcessorT() {}
};

typedef kv_management_rpc_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > kv_management_rpc_serviceProcessor;

template <class Protocol_>
class kv_management_rpc_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  kv_management_rpc_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< kv_management_rpc_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< kv_management_rpc_serviceIfFactory > handlerFactory_;
};

typedef kv_management_rpc_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > kv_management_rpc_serviceProcessorFactory;

class kv_management_rpc_serviceMultiface : virtual public kv_management_rpc_serviceIf {
 public:
  kv_management_rpc_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~kv_management_rpc_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf> > ifaces_;
  kv_management_rpc_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<kv_management_rpc_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void clear() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear();
    }
    ifaces_[i]->clear();
  }

  int64_t size() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->size();
    }
    return ifaces_[i]->size();
  }

  int64_t capacity() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->capacity();
    }
    return ifaces_[i]->capacity();
  }

  int64_t num_entries() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->num_entries();
    }
    return ifaces_[i]->num_entries();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class kv_management_rpc_serviceConcurrentClientT : virtual public kv_management_rpc_serviceIf {
 public:
  kv_management_rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  kv_management_rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void clear();
  int32_t send_clear();
  void recv_clear(const int32_t seqid);
  int64_t size();
  int32_t send_size();
  int64_t recv_size(const int32_t seqid);
  int64_t capacity();
  int32_t send_capacity();
  int64_t recv_capacity(const int32_t seqid);
  int64_t num_entries();
  int32_t send_num_entries();
  int64_t recv_num_entries(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef kv_management_rpc_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> kv_management_rpc_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "kv_management_rpc_service.tcc"
#include "kv_service_types.tcc"

#endif
