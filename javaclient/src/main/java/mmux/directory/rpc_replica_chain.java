/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mmux.directory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class rpc_replica_chain implements org.apache.thrift.TBase<rpc_replica_chain, rpc_replica_chain._Fields>, java.io.Serializable, Cloneable, Comparable<rpc_replica_chain> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpc_replica_chain");

  private static final org.apache.thrift.protocol.TField BLOCK_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("block_names", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SLOT_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_begin", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SLOT_END_FIELD_DESC = new org.apache.thrift.protocol.TField("slot_end", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rpc_replica_chainStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rpc_replica_chainTupleSchemeFactory();

  public java.util.List<java.lang.String> block_names; // required
  public int slot_begin; // required
  public int slot_end; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCK_NAMES((short)1, "block_names"),
    SLOT_BEGIN((short)2, "slot_begin"),
    SLOT_END((short)3, "slot_end");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCK_NAMES
          return BLOCK_NAMES;
        case 2: // SLOT_BEGIN
          return SLOT_BEGIN;
        case 3: // SLOT_END
          return SLOT_END;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLOT_BEGIN_ISSET_ID = 0;
  private static final int __SLOT_END_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCK_NAMES, new org.apache.thrift.meta_data.FieldMetaData("block_names", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SLOT_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("slot_begin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLOT_END, new org.apache.thrift.meta_data.FieldMetaData("slot_end", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpc_replica_chain.class, metaDataMap);
  }

  public rpc_replica_chain() {
  }

  public rpc_replica_chain(
    java.util.List<java.lang.String> block_names,
    int slot_begin,
    int slot_end)
  {
    this();
    this.block_names = block_names;
    this.slot_begin = slot_begin;
    setSlotBeginIsSet(true);
    this.slot_end = slot_end;
    setSlotEndIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public rpc_replica_chain(rpc_replica_chain other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBlockNames()) {
      java.util.List<java.lang.String> __this__block_names = new java.util.ArrayList<java.lang.String>(other.block_names);
      this.block_names = __this__block_names;
    }
    this.slot_begin = other.slot_begin;
    this.slot_end = other.slot_end;
  }

  public rpc_replica_chain deepCopy() {
    return new rpc_replica_chain(this);
  }

  @Override
  public void clear() {
    this.block_names = null;
    setSlotBeginIsSet(false);
    this.slot_begin = 0;
    setSlotEndIsSet(false);
    this.slot_end = 0;
  }

  public int getBlockNamesSize() {
    return (this.block_names == null) ? 0 : this.block_names.size();
  }

  public java.util.Iterator<java.lang.String> getBlockNamesIterator() {
    return (this.block_names == null) ? null : this.block_names.iterator();
  }

  public void addToBlockNames(java.lang.String elem) {
    if (this.block_names == null) {
      this.block_names = new java.util.ArrayList<java.lang.String>();
    }
    this.block_names.add(elem);
  }

  public java.util.List<java.lang.String> getBlockNames() {
    return this.block_names;
  }

  public rpc_replica_chain setBlockNames(java.util.List<java.lang.String> block_names) {
    this.block_names = block_names;
    return this;
  }

  public void unsetBlockNames() {
    this.block_names = null;
  }

  /** Returns true if field block_names is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockNames() {
    return this.block_names != null;
  }

  public void setBlockNamesIsSet(boolean value) {
    if (!value) {
      this.block_names = null;
    }
  }

  public int getSlotBegin() {
    return this.slot_begin;
  }

  public rpc_replica_chain setSlotBegin(int slot_begin) {
    this.slot_begin = slot_begin;
    setSlotBeginIsSet(true);
    return this;
  }

  public void unsetSlotBegin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLOT_BEGIN_ISSET_ID);
  }

  /** Returns true if field slot_begin is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotBegin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLOT_BEGIN_ISSET_ID);
  }

  public void setSlotBeginIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLOT_BEGIN_ISSET_ID, value);
  }

  public int getSlotEnd() {
    return this.slot_end;
  }

  public rpc_replica_chain setSlotEnd(int slot_end) {
    this.slot_end = slot_end;
    setSlotEndIsSet(true);
    return this;
  }

  public void unsetSlotEnd() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLOT_END_ISSET_ID);
  }

  /** Returns true if field slot_end is set (has been assigned a value) and false otherwise */
  public boolean isSetSlotEnd() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLOT_END_ISSET_ID);
  }

  public void setSlotEndIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLOT_END_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BLOCK_NAMES:
      if (value == null) {
        unsetBlockNames();
      } else {
        setBlockNames((java.util.List<java.lang.String>)value);
      }
      break;

    case SLOT_BEGIN:
      if (value == null) {
        unsetSlotBegin();
      } else {
        setSlotBegin((java.lang.Integer)value);
      }
      break;

    case SLOT_END:
      if (value == null) {
        unsetSlotEnd();
      } else {
        setSlotEnd((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCK_NAMES:
      return getBlockNames();

    case SLOT_BEGIN:
      return getSlotBegin();

    case SLOT_END:
      return getSlotEnd();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BLOCK_NAMES:
      return isSetBlockNames();
    case SLOT_BEGIN:
      return isSetSlotBegin();
    case SLOT_END:
      return isSetSlotEnd();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof rpc_replica_chain)
      return this.equals((rpc_replica_chain)that);
    return false;
  }

  public boolean equals(rpc_replica_chain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_block_names = true && this.isSetBlockNames();
    boolean that_present_block_names = true && that.isSetBlockNames();
    if (this_present_block_names || that_present_block_names) {
      if (!(this_present_block_names && that_present_block_names))
        return false;
      if (!this.block_names.equals(that.block_names))
        return false;
    }

    boolean this_present_slot_begin = true;
    boolean that_present_slot_begin = true;
    if (this_present_slot_begin || that_present_slot_begin) {
      if (!(this_present_slot_begin && that_present_slot_begin))
        return false;
      if (this.slot_begin != that.slot_begin)
        return false;
    }

    boolean this_present_slot_end = true;
    boolean that_present_slot_end = true;
    if (this_present_slot_end || that_present_slot_end) {
      if (!(this_present_slot_end && that_present_slot_end))
        return false;
      if (this.slot_end != that.slot_end)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBlockNames()) ? 131071 : 524287);
    if (isSetBlockNames())
      hashCode = hashCode * 8191 + block_names.hashCode();

    hashCode = hashCode * 8191 + slot_begin;

    hashCode = hashCode * 8191 + slot_end;

    return hashCode;
  }

  @Override
  public int compareTo(rpc_replica_chain other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBlockNames()).compareTo(other.isSetBlockNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_names, other.block_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlotBegin()).compareTo(other.isSetSlotBegin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotBegin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_begin, other.slot_begin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlotEnd()).compareTo(other.isSetSlotEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlotEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slot_end, other.slot_end);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("rpc_replica_chain(");
    boolean first = true;

    sb.append("block_names:");
    if (this.block_names == null) {
      sb.append("null");
    } else {
      sb.append(this.block_names);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slot_begin:");
    sb.append(this.slot_begin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slot_end:");
    sb.append(this.slot_end);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (block_names == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'block_names' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'slot_begin' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'slot_end' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class rpc_replica_chainStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public rpc_replica_chainStandardScheme getScheme() {
      return new rpc_replica_chainStandardScheme();
    }
  }

  private static class rpc_replica_chainStandardScheme extends org.apache.thrift.scheme.StandardScheme<rpc_replica_chain> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCK_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.block_names = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.block_names.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setBlockNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLOT_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slot_begin = iprot.readI32();
              struct.setSlotBeginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLOT_END
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slot_end = iprot.readI32();
              struct.setSlotEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSlotBegin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'slot_begin' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSlotEnd()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'slot_end' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.block_names != null) {
        oprot.writeFieldBegin(BLOCK_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.block_names.size()));
          for (java.lang.String _iter3 : struct.block_names)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SLOT_BEGIN_FIELD_DESC);
      oprot.writeI32(struct.slot_begin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLOT_END_FIELD_DESC);
      oprot.writeI32(struct.slot_end);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class rpc_replica_chainTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public rpc_replica_chainTupleScheme getScheme() {
      return new rpc_replica_chainTupleScheme();
    }
  }

  private static class rpc_replica_chainTupleScheme extends org.apache.thrift.scheme.TupleScheme<rpc_replica_chain> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        oprot.writeI32(struct.block_names.size());
        for (java.lang.String _iter4 : struct.block_names)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeI32(struct.slot_begin);
      oprot.writeI32(struct.slot_end);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, rpc_replica_chain struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.block_names = new java.util.ArrayList<java.lang.String>(_list5.size);
        java.lang.String _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = iprot.readString();
          struct.block_names.add(_elem6);
        }
      }
      struct.setBlockNamesIsSet(true);
      struct.slot_begin = iprot.readI32();
      struct.setSlotBeginIsSet(true);
      struct.slot_end = iprot.readI32();
      struct.setSlotEndIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

