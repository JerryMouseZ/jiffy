/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mmux.directory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)")
public class rpc_data_status implements org.apache.thrift.TBase<rpc_data_status, rpc_data_status._Fields>, java.io.Serializable, Cloneable, Comparable<rpc_data_status> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpc_data_status");

  private static final org.apache.thrift.protocol.TField STORAGE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("storage_mode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PERSISTENT_STORE_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("persistent_store_prefix", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHAIN_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("chain_length", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("data_blocks", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rpc_data_statusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rpc_data_statusTupleSchemeFactory();

  /**
   * 
   * @see rpc_storage_mode
   */
  public rpc_storage_mode storage_mode; // required
  public java.lang.String persistent_store_prefix; // required
  public int chain_length; // required
  public java.util.List<rpc_replica_chain> data_blocks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see rpc_storage_mode
     */
    STORAGE_MODE((short)1, "storage_mode"),
    PERSISTENT_STORE_PREFIX((short)2, "persistent_store_prefix"),
    CHAIN_LENGTH((short)3, "chain_length"),
    DATA_BLOCKS((short)4, "data_blocks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORAGE_MODE
          return STORAGE_MODE;
        case 2: // PERSISTENT_STORE_PREFIX
          return PERSISTENT_STORE_PREFIX;
        case 3: // CHAIN_LENGTH
          return CHAIN_LENGTH;
        case 4: // DATA_BLOCKS
          return DATA_BLOCKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHAIN_LENGTH_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORAGE_MODE, new org.apache.thrift.meta_data.FieldMetaData("storage_mode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, rpc_storage_mode.class)));
    tmpMap.put(_Fields.PERSISTENT_STORE_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("persistent_store_prefix", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAIN_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("chain_length", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("data_blocks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rpc_replica_chain.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpc_data_status.class, metaDataMap);
  }

  public rpc_data_status() {
  }

  public rpc_data_status(
    rpc_storage_mode storage_mode,
    java.lang.String persistent_store_prefix,
    int chain_length,
    java.util.List<rpc_replica_chain> data_blocks)
  {
    this();
    this.storage_mode = storage_mode;
    this.persistent_store_prefix = persistent_store_prefix;
    this.chain_length = chain_length;
    setChainLengthIsSet(true);
    this.data_blocks = data_blocks;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public rpc_data_status(rpc_data_status other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStorageMode()) {
      this.storage_mode = other.storage_mode;
    }
    if (other.isSetPersistentStorePrefix()) {
      this.persistent_store_prefix = other.persistent_store_prefix;
    }
    this.chain_length = other.chain_length;
    if (other.isSetDataBlocks()) {
      java.util.List<rpc_replica_chain> __this__data_blocks = new java.util.ArrayList<rpc_replica_chain>(other.data_blocks.size());
      for (rpc_replica_chain other_element : other.data_blocks) {
        __this__data_blocks.add(new rpc_replica_chain(other_element));
      }
      this.data_blocks = __this__data_blocks;
    }
  }

  public rpc_data_status deepCopy() {
    return new rpc_data_status(this);
  }

  @Override
  public void clear() {
    this.storage_mode = null;
    this.persistent_store_prefix = null;
    setChainLengthIsSet(false);
    this.chain_length = 0;
    this.data_blocks = null;
  }

  /**
   * 
   * @see rpc_storage_mode
   */
  public rpc_storage_mode getStorageMode() {
    return this.storage_mode;
  }

  /**
   * 
   * @see rpc_storage_mode
   */
  public rpc_data_status setStorageMode(rpc_storage_mode storage_mode) {
    this.storage_mode = storage_mode;
    return this;
  }

  public void unsetStorageMode() {
    this.storage_mode = null;
  }

  /** Returns true if field storage_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetStorageMode() {
    return this.storage_mode != null;
  }

  public void setStorageModeIsSet(boolean value) {
    if (!value) {
      this.storage_mode = null;
    }
  }

  public java.lang.String getPersistentStorePrefix() {
    return this.persistent_store_prefix;
  }

  public rpc_data_status setPersistentStorePrefix(java.lang.String persistent_store_prefix) {
    this.persistent_store_prefix = persistent_store_prefix;
    return this;
  }

  public void unsetPersistentStorePrefix() {
    this.persistent_store_prefix = null;
  }

  /** Returns true if field persistent_store_prefix is set (has been assigned a value) and false otherwise */
  public boolean isSetPersistentStorePrefix() {
    return this.persistent_store_prefix != null;
  }

  public void setPersistentStorePrefixIsSet(boolean value) {
    if (!value) {
      this.persistent_store_prefix = null;
    }
  }

  public int getChainLength() {
    return this.chain_length;
  }

  public rpc_data_status setChainLength(int chain_length) {
    this.chain_length = chain_length;
    setChainLengthIsSet(true);
    return this;
  }

  public void unsetChainLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHAIN_LENGTH_ISSET_ID);
  }

  /** Returns true if field chain_length is set (has been assigned a value) and false otherwise */
  public boolean isSetChainLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHAIN_LENGTH_ISSET_ID);
  }

  public void setChainLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHAIN_LENGTH_ISSET_ID, value);
  }

  public int getDataBlocksSize() {
    return (this.data_blocks == null) ? 0 : this.data_blocks.size();
  }

  public java.util.Iterator<rpc_replica_chain> getDataBlocksIterator() {
    return (this.data_blocks == null) ? null : this.data_blocks.iterator();
  }

  public void addToDataBlocks(rpc_replica_chain elem) {
    if (this.data_blocks == null) {
      this.data_blocks = new java.util.ArrayList<rpc_replica_chain>();
    }
    this.data_blocks.add(elem);
  }

  public java.util.List<rpc_replica_chain> getDataBlocks() {
    return this.data_blocks;
  }

  public rpc_data_status setDataBlocks(java.util.List<rpc_replica_chain> data_blocks) {
    this.data_blocks = data_blocks;
    return this;
  }

  public void unsetDataBlocks() {
    this.data_blocks = null;
  }

  /** Returns true if field data_blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetDataBlocks() {
    return this.data_blocks != null;
  }

  public void setDataBlocksIsSet(boolean value) {
    if (!value) {
      this.data_blocks = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STORAGE_MODE:
      if (value == null) {
        unsetStorageMode();
      } else {
        setStorageMode((rpc_storage_mode)value);
      }
      break;

    case PERSISTENT_STORE_PREFIX:
      if (value == null) {
        unsetPersistentStorePrefix();
      } else {
        setPersistentStorePrefix((java.lang.String)value);
      }
      break;

    case CHAIN_LENGTH:
      if (value == null) {
        unsetChainLength();
      } else {
        setChainLength((java.lang.Integer)value);
      }
      break;

    case DATA_BLOCKS:
      if (value == null) {
        unsetDataBlocks();
      } else {
        setDataBlocks((java.util.List<rpc_replica_chain>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STORAGE_MODE:
      return getStorageMode();

    case PERSISTENT_STORE_PREFIX:
      return getPersistentStorePrefix();

    case CHAIN_LENGTH:
      return getChainLength();

    case DATA_BLOCKS:
      return getDataBlocks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STORAGE_MODE:
      return isSetStorageMode();
    case PERSISTENT_STORE_PREFIX:
      return isSetPersistentStorePrefix();
    case CHAIN_LENGTH:
      return isSetChainLength();
    case DATA_BLOCKS:
      return isSetDataBlocks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof rpc_data_status)
      return this.equals((rpc_data_status)that);
    return false;
  }

  public boolean equals(rpc_data_status that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_storage_mode = true && this.isSetStorageMode();
    boolean that_present_storage_mode = true && that.isSetStorageMode();
    if (this_present_storage_mode || that_present_storage_mode) {
      if (!(this_present_storage_mode && that_present_storage_mode))
        return false;
      if (!this.storage_mode.equals(that.storage_mode))
        return false;
    }

    boolean this_present_persistent_store_prefix = true && this.isSetPersistentStorePrefix();
    boolean that_present_persistent_store_prefix = true && that.isSetPersistentStorePrefix();
    if (this_present_persistent_store_prefix || that_present_persistent_store_prefix) {
      if (!(this_present_persistent_store_prefix && that_present_persistent_store_prefix))
        return false;
      if (!this.persistent_store_prefix.equals(that.persistent_store_prefix))
        return false;
    }

    boolean this_present_chain_length = true;
    boolean that_present_chain_length = true;
    if (this_present_chain_length || that_present_chain_length) {
      if (!(this_present_chain_length && that_present_chain_length))
        return false;
      if (this.chain_length != that.chain_length)
        return false;
    }

    boolean this_present_data_blocks = true && this.isSetDataBlocks();
    boolean that_present_data_blocks = true && that.isSetDataBlocks();
    if (this_present_data_blocks || that_present_data_blocks) {
      if (!(this_present_data_blocks && that_present_data_blocks))
        return false;
      if (!this.data_blocks.equals(that.data_blocks))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStorageMode()) ? 131071 : 524287);
    if (isSetStorageMode())
      hashCode = hashCode * 8191 + storage_mode.getValue();

    hashCode = hashCode * 8191 + ((isSetPersistentStorePrefix()) ? 131071 : 524287);
    if (isSetPersistentStorePrefix())
      hashCode = hashCode * 8191 + persistent_store_prefix.hashCode();

    hashCode = hashCode * 8191 + chain_length;

    hashCode = hashCode * 8191 + ((isSetDataBlocks()) ? 131071 : 524287);
    if (isSetDataBlocks())
      hashCode = hashCode * 8191 + data_blocks.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(rpc_data_status other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStorageMode()).compareTo(other.isSetStorageMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStorageMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storage_mode, other.storage_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPersistentStorePrefix()).compareTo(other.isSetPersistentStorePrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersistentStorePrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.persistent_store_prefix, other.persistent_store_prefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChainLength()).compareTo(other.isSetChainLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChainLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chain_length, other.chain_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataBlocks()).compareTo(other.isSetDataBlocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataBlocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data_blocks, other.data_blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("rpc_data_status(");
    boolean first = true;

    sb.append("storage_mode:");
    if (this.storage_mode == null) {
      sb.append("null");
    } else {
      sb.append(this.storage_mode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("persistent_store_prefix:");
    if (this.persistent_store_prefix == null) {
      sb.append("null");
    } else {
      sb.append(this.persistent_store_prefix);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chain_length:");
    sb.append(this.chain_length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data_blocks:");
    if (this.data_blocks == null) {
      sb.append("null");
    } else {
      sb.append(this.data_blocks);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (storage_mode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storage_mode' was not present! Struct: " + toString());
    }
    if (persistent_store_prefix == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'persistent_store_prefix' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'chain_length' because it's a primitive and you chose the non-beans generator.
    if (data_blocks == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data_blocks' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class rpc_data_statusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public rpc_data_statusStandardScheme getScheme() {
      return new rpc_data_statusStandardScheme();
    }
  }

  private static class rpc_data_statusStandardScheme extends org.apache.thrift.scheme.StandardScheme<rpc_data_status> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, rpc_data_status struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STORAGE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.storage_mode = mmux.directory.rpc_storage_mode.findByValue(iprot.readI32());
              struct.setStorageModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PERSISTENT_STORE_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.persistent_store_prefix = iprot.readString();
              struct.setPersistentStorePrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHAIN_LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chain_length = iprot.readI32();
              struct.setChainLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.data_blocks = new java.util.ArrayList<rpc_replica_chain>(_list8.size);
                rpc_replica_chain _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new rpc_replica_chain();
                  _elem9.read(iprot);
                  struct.data_blocks.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDataBlocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetChainLength()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'chain_length' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, rpc_data_status struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.storage_mode != null) {
        oprot.writeFieldBegin(STORAGE_MODE_FIELD_DESC);
        oprot.writeI32(struct.storage_mode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.persistent_store_prefix != null) {
        oprot.writeFieldBegin(PERSISTENT_STORE_PREFIX_FIELD_DESC);
        oprot.writeString(struct.persistent_store_prefix);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHAIN_LENGTH_FIELD_DESC);
      oprot.writeI32(struct.chain_length);
      oprot.writeFieldEnd();
      if (struct.data_blocks != null) {
        oprot.writeFieldBegin(DATA_BLOCKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.data_blocks.size()));
          for (rpc_replica_chain _iter11 : struct.data_blocks)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class rpc_data_statusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public rpc_data_statusTupleScheme getScheme() {
      return new rpc_data_statusTupleScheme();
    }
  }

  private static class rpc_data_statusTupleScheme extends org.apache.thrift.scheme.TupleScheme<rpc_data_status> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, rpc_data_status struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.storage_mode.getValue());
      oprot.writeString(struct.persistent_store_prefix);
      oprot.writeI32(struct.chain_length);
      {
        oprot.writeI32(struct.data_blocks.size());
        for (rpc_replica_chain _iter12 : struct.data_blocks)
        {
          _iter12.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, rpc_data_status struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.storage_mode = mmux.directory.rpc_storage_mode.findByValue(iprot.readI32());
      struct.setStorageModeIsSet(true);
      struct.persistent_store_prefix = iprot.readString();
      struct.setPersistentStorePrefixIsSet(true);
      struct.chain_length = iprot.readI32();
      struct.setChainLengthIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.data_blocks = new java.util.ArrayList<rpc_replica_chain>(_list13.size);
        rpc_replica_chain _elem14;
        for (int _i15 = 0; _i15 < _list13.size; ++_i15)
        {
          _elem14 = new rpc_replica_chain();
          _elem14.read(iprot);
          struct.data_blocks.add(_elem14);
        }
      }
      struct.setDataBlocksIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

