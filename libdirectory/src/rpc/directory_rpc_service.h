/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef directory_rpc_service_H
#define directory_rpc_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "directory_service_types.h"

namespace elasticmem { namespace directory {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class directory_rpc_serviceIf {
 public:
  virtual ~directory_rpc_serviceIf() {}
  virtual void create_directory(const std::string& path) = 0;
  virtual void create_directories(const std::string& path) = 0;
  virtual void create_file(const std::string& path) = 0;
  virtual bool exists(const std::string& path) = 0;
  virtual int64_t file_size(const std::string& path) = 0;
  virtual int64_t last_write_time(const std::string& path) = 0;
  virtual void set_permissions(const std::string& path, const rpc_perms perms, const rpc_perm_options opts) = 0;
  virtual rpc_perms get_permissions(const std::string& path) = 0;
  virtual void remove(const std::string& path) = 0;
  virtual void remove_all(const std::string& path) = 0;
  virtual void rename(const std::string& old_path, const std::string& new_path) = 0;
  virtual void status(rpc_file_status& _return, const std::string& path) = 0;
  virtual void directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path) = 0;
  virtual void recursive_directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path) = 0;
  virtual void dstatus(rpc_data_status& _return, const std::string& path) = 0;
  virtual rpc_storage_mode mode(const std::string& path) = 0;
  virtual void nodes(std::vector<std::string> & _return, const std::string& path) = 0;
  virtual bool is_regular_file(const std::string& path) = 0;
  virtual bool is_directory(const std::string& path) = 0;
};

class directory_rpc_serviceIfFactory {
 public:
  typedef directory_rpc_serviceIf Handler;

  virtual ~directory_rpc_serviceIfFactory() {}

  virtual directory_rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(directory_rpc_serviceIf* /* handler */) = 0;
};

class directory_rpc_serviceIfSingletonFactory : virtual public directory_rpc_serviceIfFactory {
 public:
  directory_rpc_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf>& iface) : iface_(iface) {}
  virtual ~directory_rpc_serviceIfSingletonFactory() {}

  virtual directory_rpc_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(directory_rpc_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf> iface_;
};

class directory_rpc_serviceNull : virtual public directory_rpc_serviceIf {
 public:
  virtual ~directory_rpc_serviceNull() {}
  void create_directory(const std::string& /* path */) {
    return;
  }
  void create_directories(const std::string& /* path */) {
    return;
  }
  void create_file(const std::string& /* path */) {
    return;
  }
  bool exists(const std::string& /* path */) {
    bool _return = false;
    return _return;
  }
  int64_t file_size(const std::string& /* path */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t last_write_time(const std::string& /* path */) {
    int64_t _return = 0;
    return _return;
  }
  void set_permissions(const std::string& /* path */, const rpc_perms /* perms */, const rpc_perm_options /* opts */) {
    return;
  }
  rpc_perms get_permissions(const std::string& /* path */) {
    rpc_perms _return = 0;
    return _return;
  }
  void remove(const std::string& /* path */) {
    return;
  }
  void remove_all(const std::string& /* path */) {
    return;
  }
  void rename(const std::string& /* old_path */, const std::string& /* new_path */) {
    return;
  }
  void status(rpc_file_status& /* _return */, const std::string& /* path */) {
    return;
  }
  void directory_entries(std::vector<rpc_dir_entry> & /* _return */, const std::string& /* path */) {
    return;
  }
  void recursive_directory_entries(std::vector<rpc_dir_entry> & /* _return */, const std::string& /* path */) {
    return;
  }
  void dstatus(rpc_data_status& /* _return */, const std::string& /* path */) {
    return;
  }
  rpc_storage_mode mode(const std::string& /* path */) {
    rpc_storage_mode _return = (rpc_storage_mode)0;
    return _return;
  }
  void nodes(std::vector<std::string> & /* _return */, const std::string& /* path */) {
    return;
  }
  bool is_regular_file(const std::string& /* path */) {
    bool _return = false;
    return _return;
  }
  bool is_directory(const std::string& /* path */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _directory_rpc_service_create_directory_args__isset {
  _directory_rpc_service_create_directory_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_create_directory_args__isset;

class directory_rpc_service_create_directory_args {
 public:

  directory_rpc_service_create_directory_args(const directory_rpc_service_create_directory_args&);
  directory_rpc_service_create_directory_args& operator=(const directory_rpc_service_create_directory_args&);
  directory_rpc_service_create_directory_args() : path() {
  }

  virtual ~directory_rpc_service_create_directory_args() throw();
  std::string path;

  _directory_rpc_service_create_directory_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_create_directory_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_create_directory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_create_directory_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_create_directory_pargs {
 public:


  virtual ~directory_rpc_service_create_directory_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_create_directory_result__isset {
  _directory_rpc_service_create_directory_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_create_directory_result__isset;

class directory_rpc_service_create_directory_result {
 public:

  directory_rpc_service_create_directory_result(const directory_rpc_service_create_directory_result&);
  directory_rpc_service_create_directory_result& operator=(const directory_rpc_service_create_directory_result&);
  directory_rpc_service_create_directory_result() {
  }

  virtual ~directory_rpc_service_create_directory_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_create_directory_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_create_directory_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_create_directory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_create_directory_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_create_directory_presult__isset {
  _directory_rpc_service_create_directory_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_create_directory_presult__isset;

class directory_rpc_service_create_directory_presult {
 public:


  virtual ~directory_rpc_service_create_directory_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_create_directory_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_create_directories_args__isset {
  _directory_rpc_service_create_directories_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_create_directories_args__isset;

class directory_rpc_service_create_directories_args {
 public:

  directory_rpc_service_create_directories_args(const directory_rpc_service_create_directories_args&);
  directory_rpc_service_create_directories_args& operator=(const directory_rpc_service_create_directories_args&);
  directory_rpc_service_create_directories_args() : path() {
  }

  virtual ~directory_rpc_service_create_directories_args() throw();
  std::string path;

  _directory_rpc_service_create_directories_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_create_directories_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_create_directories_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_create_directories_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_create_directories_pargs {
 public:


  virtual ~directory_rpc_service_create_directories_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_create_directories_result__isset {
  _directory_rpc_service_create_directories_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_create_directories_result__isset;

class directory_rpc_service_create_directories_result {
 public:

  directory_rpc_service_create_directories_result(const directory_rpc_service_create_directories_result&);
  directory_rpc_service_create_directories_result& operator=(const directory_rpc_service_create_directories_result&);
  directory_rpc_service_create_directories_result() {
  }

  virtual ~directory_rpc_service_create_directories_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_create_directories_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_create_directories_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_create_directories_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_create_directories_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_create_directories_presult__isset {
  _directory_rpc_service_create_directories_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_create_directories_presult__isset;

class directory_rpc_service_create_directories_presult {
 public:


  virtual ~directory_rpc_service_create_directories_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_create_directories_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_create_file_args__isset {
  _directory_rpc_service_create_file_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_create_file_args__isset;

class directory_rpc_service_create_file_args {
 public:

  directory_rpc_service_create_file_args(const directory_rpc_service_create_file_args&);
  directory_rpc_service_create_file_args& operator=(const directory_rpc_service_create_file_args&);
  directory_rpc_service_create_file_args() : path() {
  }

  virtual ~directory_rpc_service_create_file_args() throw();
  std::string path;

  _directory_rpc_service_create_file_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_create_file_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_create_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_create_file_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_create_file_pargs {
 public:


  virtual ~directory_rpc_service_create_file_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_create_file_result__isset {
  _directory_rpc_service_create_file_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_create_file_result__isset;

class directory_rpc_service_create_file_result {
 public:

  directory_rpc_service_create_file_result(const directory_rpc_service_create_file_result&);
  directory_rpc_service_create_file_result& operator=(const directory_rpc_service_create_file_result&);
  directory_rpc_service_create_file_result() {
  }

  virtual ~directory_rpc_service_create_file_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_create_file_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_create_file_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_create_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_create_file_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_create_file_presult__isset {
  _directory_rpc_service_create_file_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_create_file_presult__isset;

class directory_rpc_service_create_file_presult {
 public:


  virtual ~directory_rpc_service_create_file_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_create_file_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_exists_args__isset {
  _directory_rpc_service_exists_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_exists_args__isset;

class directory_rpc_service_exists_args {
 public:

  directory_rpc_service_exists_args(const directory_rpc_service_exists_args&);
  directory_rpc_service_exists_args& operator=(const directory_rpc_service_exists_args&);
  directory_rpc_service_exists_args() : path() {
  }

  virtual ~directory_rpc_service_exists_args() throw();
  std::string path;

  _directory_rpc_service_exists_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_exists_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_exists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_exists_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_exists_pargs {
 public:


  virtual ~directory_rpc_service_exists_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_exists_result__isset {
  _directory_rpc_service_exists_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_exists_result__isset;

class directory_rpc_service_exists_result {
 public:

  directory_rpc_service_exists_result(const directory_rpc_service_exists_result&);
  directory_rpc_service_exists_result& operator=(const directory_rpc_service_exists_result&);
  directory_rpc_service_exists_result() : success(0) {
  }

  virtual ~directory_rpc_service_exists_result() throw();
  bool success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_exists_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_exists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_exists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_exists_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_exists_presult__isset {
  _directory_rpc_service_exists_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_exists_presult__isset;

class directory_rpc_service_exists_presult {
 public:


  virtual ~directory_rpc_service_exists_presult() throw();
  bool* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_exists_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_file_size_args__isset {
  _directory_rpc_service_file_size_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_file_size_args__isset;

class directory_rpc_service_file_size_args {
 public:

  directory_rpc_service_file_size_args(const directory_rpc_service_file_size_args&);
  directory_rpc_service_file_size_args& operator=(const directory_rpc_service_file_size_args&);
  directory_rpc_service_file_size_args() : path() {
  }

  virtual ~directory_rpc_service_file_size_args() throw();
  std::string path;

  _directory_rpc_service_file_size_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_file_size_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_file_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_file_size_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_file_size_pargs {
 public:


  virtual ~directory_rpc_service_file_size_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_file_size_result__isset {
  _directory_rpc_service_file_size_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_file_size_result__isset;

class directory_rpc_service_file_size_result {
 public:

  directory_rpc_service_file_size_result(const directory_rpc_service_file_size_result&);
  directory_rpc_service_file_size_result& operator=(const directory_rpc_service_file_size_result&);
  directory_rpc_service_file_size_result() : success(0) {
  }

  virtual ~directory_rpc_service_file_size_result() throw();
  int64_t success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_file_size_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_file_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_file_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_file_size_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_file_size_presult__isset {
  _directory_rpc_service_file_size_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_file_size_presult__isset;

class directory_rpc_service_file_size_presult {
 public:


  virtual ~directory_rpc_service_file_size_presult() throw();
  int64_t* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_file_size_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_last_write_time_args__isset {
  _directory_rpc_service_last_write_time_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_last_write_time_args__isset;

class directory_rpc_service_last_write_time_args {
 public:

  directory_rpc_service_last_write_time_args(const directory_rpc_service_last_write_time_args&);
  directory_rpc_service_last_write_time_args& operator=(const directory_rpc_service_last_write_time_args&);
  directory_rpc_service_last_write_time_args() : path() {
  }

  virtual ~directory_rpc_service_last_write_time_args() throw();
  std::string path;

  _directory_rpc_service_last_write_time_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_last_write_time_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_last_write_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_last_write_time_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_last_write_time_pargs {
 public:


  virtual ~directory_rpc_service_last_write_time_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_last_write_time_result__isset {
  _directory_rpc_service_last_write_time_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_last_write_time_result__isset;

class directory_rpc_service_last_write_time_result {
 public:

  directory_rpc_service_last_write_time_result(const directory_rpc_service_last_write_time_result&);
  directory_rpc_service_last_write_time_result& operator=(const directory_rpc_service_last_write_time_result&);
  directory_rpc_service_last_write_time_result() : success(0) {
  }

  virtual ~directory_rpc_service_last_write_time_result() throw();
  int64_t success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_last_write_time_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_last_write_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_last_write_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_last_write_time_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_last_write_time_presult__isset {
  _directory_rpc_service_last_write_time_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_last_write_time_presult__isset;

class directory_rpc_service_last_write_time_presult {
 public:


  virtual ~directory_rpc_service_last_write_time_presult() throw();
  int64_t* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_last_write_time_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_set_permissions_args__isset {
  _directory_rpc_service_set_permissions_args__isset() : path(false), perms(false), opts(false) {}
  bool path :1;
  bool perms :1;
  bool opts :1;
} _directory_rpc_service_set_permissions_args__isset;

class directory_rpc_service_set_permissions_args {
 public:

  directory_rpc_service_set_permissions_args(const directory_rpc_service_set_permissions_args&);
  directory_rpc_service_set_permissions_args& operator=(const directory_rpc_service_set_permissions_args&);
  directory_rpc_service_set_permissions_args() : path(), perms(0), opts((rpc_perm_options)0) {
  }

  virtual ~directory_rpc_service_set_permissions_args() throw();
  std::string path;
  rpc_perms perms;
  rpc_perm_options opts;

  _directory_rpc_service_set_permissions_args__isset __isset;

  void __set_path(const std::string& val);

  void __set_perms(const rpc_perms val);

  void __set_opts(const rpc_perm_options val);

  bool operator == (const directory_rpc_service_set_permissions_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(perms == rhs.perms))
      return false;
    if (!(opts == rhs.opts))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_set_permissions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_set_permissions_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_set_permissions_pargs {
 public:


  virtual ~directory_rpc_service_set_permissions_pargs() throw();
  const std::string* path;
  const rpc_perms* perms;
  const rpc_perm_options* opts;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_set_permissions_result__isset {
  _directory_rpc_service_set_permissions_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_set_permissions_result__isset;

class directory_rpc_service_set_permissions_result {
 public:

  directory_rpc_service_set_permissions_result(const directory_rpc_service_set_permissions_result&);
  directory_rpc_service_set_permissions_result& operator=(const directory_rpc_service_set_permissions_result&);
  directory_rpc_service_set_permissions_result() {
  }

  virtual ~directory_rpc_service_set_permissions_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_set_permissions_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_set_permissions_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_set_permissions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_set_permissions_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_set_permissions_presult__isset {
  _directory_rpc_service_set_permissions_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_set_permissions_presult__isset;

class directory_rpc_service_set_permissions_presult {
 public:


  virtual ~directory_rpc_service_set_permissions_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_set_permissions_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_get_permissions_args__isset {
  _directory_rpc_service_get_permissions_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_get_permissions_args__isset;

class directory_rpc_service_get_permissions_args {
 public:

  directory_rpc_service_get_permissions_args(const directory_rpc_service_get_permissions_args&);
  directory_rpc_service_get_permissions_args& operator=(const directory_rpc_service_get_permissions_args&);
  directory_rpc_service_get_permissions_args() : path() {
  }

  virtual ~directory_rpc_service_get_permissions_args() throw();
  std::string path;

  _directory_rpc_service_get_permissions_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_get_permissions_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_get_permissions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_get_permissions_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_get_permissions_pargs {
 public:


  virtual ~directory_rpc_service_get_permissions_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_get_permissions_result__isset {
  _directory_rpc_service_get_permissions_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_get_permissions_result__isset;

class directory_rpc_service_get_permissions_result {
 public:

  directory_rpc_service_get_permissions_result(const directory_rpc_service_get_permissions_result&);
  directory_rpc_service_get_permissions_result& operator=(const directory_rpc_service_get_permissions_result&);
  directory_rpc_service_get_permissions_result() : success(0) {
  }

  virtual ~directory_rpc_service_get_permissions_result() throw();
  rpc_perms success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_get_permissions_result__isset __isset;

  void __set_success(const rpc_perms val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_get_permissions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_get_permissions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_get_permissions_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_get_permissions_presult__isset {
  _directory_rpc_service_get_permissions_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_get_permissions_presult__isset;

class directory_rpc_service_get_permissions_presult {
 public:


  virtual ~directory_rpc_service_get_permissions_presult() throw();
  rpc_perms* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_get_permissions_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_remove_args__isset {
  _directory_rpc_service_remove_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_remove_args__isset;

class directory_rpc_service_remove_args {
 public:

  directory_rpc_service_remove_args(const directory_rpc_service_remove_args&);
  directory_rpc_service_remove_args& operator=(const directory_rpc_service_remove_args&);
  directory_rpc_service_remove_args() : path() {
  }

  virtual ~directory_rpc_service_remove_args() throw();
  std::string path;

  _directory_rpc_service_remove_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_remove_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_remove_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_remove_pargs {
 public:


  virtual ~directory_rpc_service_remove_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_remove_result__isset {
  _directory_rpc_service_remove_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_remove_result__isset;

class directory_rpc_service_remove_result {
 public:

  directory_rpc_service_remove_result(const directory_rpc_service_remove_result&);
  directory_rpc_service_remove_result& operator=(const directory_rpc_service_remove_result&);
  directory_rpc_service_remove_result() {
  }

  virtual ~directory_rpc_service_remove_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_remove_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_remove_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_remove_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_remove_presult__isset {
  _directory_rpc_service_remove_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_remove_presult__isset;

class directory_rpc_service_remove_presult {
 public:


  virtual ~directory_rpc_service_remove_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_remove_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_remove_all_args__isset {
  _directory_rpc_service_remove_all_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_remove_all_args__isset;

class directory_rpc_service_remove_all_args {
 public:

  directory_rpc_service_remove_all_args(const directory_rpc_service_remove_all_args&);
  directory_rpc_service_remove_all_args& operator=(const directory_rpc_service_remove_all_args&);
  directory_rpc_service_remove_all_args() : path() {
  }

  virtual ~directory_rpc_service_remove_all_args() throw();
  std::string path;

  _directory_rpc_service_remove_all_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_remove_all_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_remove_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_remove_all_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_remove_all_pargs {
 public:


  virtual ~directory_rpc_service_remove_all_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_remove_all_result__isset {
  _directory_rpc_service_remove_all_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_remove_all_result__isset;

class directory_rpc_service_remove_all_result {
 public:

  directory_rpc_service_remove_all_result(const directory_rpc_service_remove_all_result&);
  directory_rpc_service_remove_all_result& operator=(const directory_rpc_service_remove_all_result&);
  directory_rpc_service_remove_all_result() {
  }

  virtual ~directory_rpc_service_remove_all_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_remove_all_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_remove_all_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_remove_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_remove_all_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_remove_all_presult__isset {
  _directory_rpc_service_remove_all_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_remove_all_presult__isset;

class directory_rpc_service_remove_all_presult {
 public:


  virtual ~directory_rpc_service_remove_all_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_remove_all_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_rename_args__isset {
  _directory_rpc_service_rename_args__isset() : old_path(false), new_path(false) {}
  bool old_path :1;
  bool new_path :1;
} _directory_rpc_service_rename_args__isset;

class directory_rpc_service_rename_args {
 public:

  directory_rpc_service_rename_args(const directory_rpc_service_rename_args&);
  directory_rpc_service_rename_args& operator=(const directory_rpc_service_rename_args&);
  directory_rpc_service_rename_args() : old_path(), new_path() {
  }

  virtual ~directory_rpc_service_rename_args() throw();
  std::string old_path;
  std::string new_path;

  _directory_rpc_service_rename_args__isset __isset;

  void __set_old_path(const std::string& val);

  void __set_new_path(const std::string& val);

  bool operator == (const directory_rpc_service_rename_args & rhs) const
  {
    if (!(old_path == rhs.old_path))
      return false;
    if (!(new_path == rhs.new_path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_rename_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_rename_pargs {
 public:


  virtual ~directory_rpc_service_rename_pargs() throw();
  const std::string* old_path;
  const std::string* new_path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_rename_result__isset {
  _directory_rpc_service_rename_result__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_rename_result__isset;

class directory_rpc_service_rename_result {
 public:

  directory_rpc_service_rename_result(const directory_rpc_service_rename_result&);
  directory_rpc_service_rename_result& operator=(const directory_rpc_service_rename_result&);
  directory_rpc_service_rename_result() {
  }

  virtual ~directory_rpc_service_rename_result() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_rename_result__isset __isset;

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_rename_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_rename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_rename_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_rename_presult__isset {
  _directory_rpc_service_rename_presult__isset() : ex(false) {}
  bool ex :1;
} _directory_rpc_service_rename_presult__isset;

class directory_rpc_service_rename_presult {
 public:


  virtual ~directory_rpc_service_rename_presult() throw();
  directory_rpc_service_exception ex;

  _directory_rpc_service_rename_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_status_args__isset {
  _directory_rpc_service_status_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_status_args__isset;

class directory_rpc_service_status_args {
 public:

  directory_rpc_service_status_args(const directory_rpc_service_status_args&);
  directory_rpc_service_status_args& operator=(const directory_rpc_service_status_args&);
  directory_rpc_service_status_args() : path() {
  }

  virtual ~directory_rpc_service_status_args() throw();
  std::string path;

  _directory_rpc_service_status_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_status_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_status_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_status_pargs {
 public:


  virtual ~directory_rpc_service_status_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_status_result__isset {
  _directory_rpc_service_status_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_status_result__isset;

class directory_rpc_service_status_result {
 public:

  directory_rpc_service_status_result(const directory_rpc_service_status_result&);
  directory_rpc_service_status_result& operator=(const directory_rpc_service_status_result&);
  directory_rpc_service_status_result() {
  }

  virtual ~directory_rpc_service_status_result() throw();
  rpc_file_status success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_status_result__isset __isset;

  void __set_success(const rpc_file_status& val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_status_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_status_presult__isset {
  _directory_rpc_service_status_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_status_presult__isset;

class directory_rpc_service_status_presult {
 public:


  virtual ~directory_rpc_service_status_presult() throw();
  rpc_file_status* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_status_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_directory_entries_args__isset {
  _directory_rpc_service_directory_entries_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_directory_entries_args__isset;

class directory_rpc_service_directory_entries_args {
 public:

  directory_rpc_service_directory_entries_args(const directory_rpc_service_directory_entries_args&);
  directory_rpc_service_directory_entries_args& operator=(const directory_rpc_service_directory_entries_args&);
  directory_rpc_service_directory_entries_args() : path() {
  }

  virtual ~directory_rpc_service_directory_entries_args() throw();
  std::string path;

  _directory_rpc_service_directory_entries_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_directory_entries_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_directory_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_directory_entries_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_directory_entries_pargs {
 public:


  virtual ~directory_rpc_service_directory_entries_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_directory_entries_result__isset {
  _directory_rpc_service_directory_entries_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_directory_entries_result__isset;

class directory_rpc_service_directory_entries_result {
 public:

  directory_rpc_service_directory_entries_result(const directory_rpc_service_directory_entries_result&);
  directory_rpc_service_directory_entries_result& operator=(const directory_rpc_service_directory_entries_result&);
  directory_rpc_service_directory_entries_result() {
  }

  virtual ~directory_rpc_service_directory_entries_result() throw();
  std::vector<rpc_dir_entry>  success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_directory_entries_result__isset __isset;

  void __set_success(const std::vector<rpc_dir_entry> & val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_directory_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_directory_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_directory_entries_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_directory_entries_presult__isset {
  _directory_rpc_service_directory_entries_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_directory_entries_presult__isset;

class directory_rpc_service_directory_entries_presult {
 public:


  virtual ~directory_rpc_service_directory_entries_presult() throw();
  std::vector<rpc_dir_entry> * success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_directory_entries_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_recursive_directory_entries_args__isset {
  _directory_rpc_service_recursive_directory_entries_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_recursive_directory_entries_args__isset;

class directory_rpc_service_recursive_directory_entries_args {
 public:

  directory_rpc_service_recursive_directory_entries_args(const directory_rpc_service_recursive_directory_entries_args&);
  directory_rpc_service_recursive_directory_entries_args& operator=(const directory_rpc_service_recursive_directory_entries_args&);
  directory_rpc_service_recursive_directory_entries_args() : path() {
  }

  virtual ~directory_rpc_service_recursive_directory_entries_args() throw();
  std::string path;

  _directory_rpc_service_recursive_directory_entries_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_recursive_directory_entries_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_recursive_directory_entries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_recursive_directory_entries_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_recursive_directory_entries_pargs {
 public:


  virtual ~directory_rpc_service_recursive_directory_entries_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_recursive_directory_entries_result__isset {
  _directory_rpc_service_recursive_directory_entries_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_recursive_directory_entries_result__isset;

class directory_rpc_service_recursive_directory_entries_result {
 public:

  directory_rpc_service_recursive_directory_entries_result(const directory_rpc_service_recursive_directory_entries_result&);
  directory_rpc_service_recursive_directory_entries_result& operator=(const directory_rpc_service_recursive_directory_entries_result&);
  directory_rpc_service_recursive_directory_entries_result() {
  }

  virtual ~directory_rpc_service_recursive_directory_entries_result() throw();
  std::vector<rpc_dir_entry>  success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_recursive_directory_entries_result__isset __isset;

  void __set_success(const std::vector<rpc_dir_entry> & val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_recursive_directory_entries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_recursive_directory_entries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_recursive_directory_entries_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_recursive_directory_entries_presult__isset {
  _directory_rpc_service_recursive_directory_entries_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_recursive_directory_entries_presult__isset;

class directory_rpc_service_recursive_directory_entries_presult {
 public:


  virtual ~directory_rpc_service_recursive_directory_entries_presult() throw();
  std::vector<rpc_dir_entry> * success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_recursive_directory_entries_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_dstatus_args__isset {
  _directory_rpc_service_dstatus_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_dstatus_args__isset;

class directory_rpc_service_dstatus_args {
 public:

  directory_rpc_service_dstatus_args(const directory_rpc_service_dstatus_args&);
  directory_rpc_service_dstatus_args& operator=(const directory_rpc_service_dstatus_args&);
  directory_rpc_service_dstatus_args() : path() {
  }

  virtual ~directory_rpc_service_dstatus_args() throw();
  std::string path;

  _directory_rpc_service_dstatus_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_dstatus_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_dstatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_dstatus_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_dstatus_pargs {
 public:


  virtual ~directory_rpc_service_dstatus_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_dstatus_result__isset {
  _directory_rpc_service_dstatus_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_dstatus_result__isset;

class directory_rpc_service_dstatus_result {
 public:

  directory_rpc_service_dstatus_result(const directory_rpc_service_dstatus_result&);
  directory_rpc_service_dstatus_result& operator=(const directory_rpc_service_dstatus_result&);
  directory_rpc_service_dstatus_result() {
  }

  virtual ~directory_rpc_service_dstatus_result() throw();
  rpc_data_status success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_dstatus_result__isset __isset;

  void __set_success(const rpc_data_status& val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_dstatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_dstatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_dstatus_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_dstatus_presult__isset {
  _directory_rpc_service_dstatus_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_dstatus_presult__isset;

class directory_rpc_service_dstatus_presult {
 public:


  virtual ~directory_rpc_service_dstatus_presult() throw();
  rpc_data_status* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_dstatus_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_mode_args__isset {
  _directory_rpc_service_mode_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_mode_args__isset;

class directory_rpc_service_mode_args {
 public:

  directory_rpc_service_mode_args(const directory_rpc_service_mode_args&);
  directory_rpc_service_mode_args& operator=(const directory_rpc_service_mode_args&);
  directory_rpc_service_mode_args() : path() {
  }

  virtual ~directory_rpc_service_mode_args() throw();
  std::string path;

  _directory_rpc_service_mode_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_mode_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_mode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_mode_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_mode_pargs {
 public:


  virtual ~directory_rpc_service_mode_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_mode_result__isset {
  _directory_rpc_service_mode_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_mode_result__isset;

class directory_rpc_service_mode_result {
 public:

  directory_rpc_service_mode_result(const directory_rpc_service_mode_result&);
  directory_rpc_service_mode_result& operator=(const directory_rpc_service_mode_result&);
  directory_rpc_service_mode_result() : success((rpc_storage_mode)0) {
  }

  virtual ~directory_rpc_service_mode_result() throw();
  rpc_storage_mode success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_mode_result__isset __isset;

  void __set_success(const rpc_storage_mode val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_mode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_mode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_mode_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_mode_presult__isset {
  _directory_rpc_service_mode_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_mode_presult__isset;

class directory_rpc_service_mode_presult {
 public:


  virtual ~directory_rpc_service_mode_presult() throw();
  rpc_storage_mode* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_mode_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_nodes_args__isset {
  _directory_rpc_service_nodes_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_nodes_args__isset;

class directory_rpc_service_nodes_args {
 public:

  directory_rpc_service_nodes_args(const directory_rpc_service_nodes_args&);
  directory_rpc_service_nodes_args& operator=(const directory_rpc_service_nodes_args&);
  directory_rpc_service_nodes_args() : path() {
  }

  virtual ~directory_rpc_service_nodes_args() throw();
  std::string path;

  _directory_rpc_service_nodes_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_nodes_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_nodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_nodes_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_nodes_pargs {
 public:


  virtual ~directory_rpc_service_nodes_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_nodes_result__isset {
  _directory_rpc_service_nodes_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_nodes_result__isset;

class directory_rpc_service_nodes_result {
 public:

  directory_rpc_service_nodes_result(const directory_rpc_service_nodes_result&);
  directory_rpc_service_nodes_result& operator=(const directory_rpc_service_nodes_result&);
  directory_rpc_service_nodes_result() {
  }

  virtual ~directory_rpc_service_nodes_result() throw();
  std::vector<std::string>  success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_nodes_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_nodes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_nodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_nodes_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_nodes_presult__isset {
  _directory_rpc_service_nodes_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_nodes_presult__isset;

class directory_rpc_service_nodes_presult {
 public:


  virtual ~directory_rpc_service_nodes_presult() throw();
  std::vector<std::string> * success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_nodes_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_is_regular_file_args__isset {
  _directory_rpc_service_is_regular_file_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_is_regular_file_args__isset;

class directory_rpc_service_is_regular_file_args {
 public:

  directory_rpc_service_is_regular_file_args(const directory_rpc_service_is_regular_file_args&);
  directory_rpc_service_is_regular_file_args& operator=(const directory_rpc_service_is_regular_file_args&);
  directory_rpc_service_is_regular_file_args() : path() {
  }

  virtual ~directory_rpc_service_is_regular_file_args() throw();
  std::string path;

  _directory_rpc_service_is_regular_file_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_is_regular_file_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_is_regular_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_is_regular_file_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_is_regular_file_pargs {
 public:


  virtual ~directory_rpc_service_is_regular_file_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_is_regular_file_result__isset {
  _directory_rpc_service_is_regular_file_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_is_regular_file_result__isset;

class directory_rpc_service_is_regular_file_result {
 public:

  directory_rpc_service_is_regular_file_result(const directory_rpc_service_is_regular_file_result&);
  directory_rpc_service_is_regular_file_result& operator=(const directory_rpc_service_is_regular_file_result&);
  directory_rpc_service_is_regular_file_result() : success(0) {
  }

  virtual ~directory_rpc_service_is_regular_file_result() throw();
  bool success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_is_regular_file_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_is_regular_file_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_is_regular_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_is_regular_file_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_is_regular_file_presult__isset {
  _directory_rpc_service_is_regular_file_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_is_regular_file_presult__isset;

class directory_rpc_service_is_regular_file_presult {
 public:


  virtual ~directory_rpc_service_is_regular_file_presult() throw();
  bool* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_is_regular_file_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _directory_rpc_service_is_directory_args__isset {
  _directory_rpc_service_is_directory_args__isset() : path(false) {}
  bool path :1;
} _directory_rpc_service_is_directory_args__isset;

class directory_rpc_service_is_directory_args {
 public:

  directory_rpc_service_is_directory_args(const directory_rpc_service_is_directory_args&);
  directory_rpc_service_is_directory_args& operator=(const directory_rpc_service_is_directory_args&);
  directory_rpc_service_is_directory_args() : path() {
  }

  virtual ~directory_rpc_service_is_directory_args() throw();
  std::string path;

  _directory_rpc_service_is_directory_args__isset __isset;

  void __set_path(const std::string& val);

  bool operator == (const directory_rpc_service_is_directory_args & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_is_directory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_is_directory_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class directory_rpc_service_is_directory_pargs {
 public:


  virtual ~directory_rpc_service_is_directory_pargs() throw();
  const std::string* path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_is_directory_result__isset {
  _directory_rpc_service_is_directory_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_is_directory_result__isset;

class directory_rpc_service_is_directory_result {
 public:

  directory_rpc_service_is_directory_result(const directory_rpc_service_is_directory_result&);
  directory_rpc_service_is_directory_result& operator=(const directory_rpc_service_is_directory_result&);
  directory_rpc_service_is_directory_result() : success(0) {
  }

  virtual ~directory_rpc_service_is_directory_result() throw();
  bool success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_is_directory_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const directory_rpc_service_exception& val);

  bool operator == (const directory_rpc_service_is_directory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const directory_rpc_service_is_directory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const directory_rpc_service_is_directory_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _directory_rpc_service_is_directory_presult__isset {
  _directory_rpc_service_is_directory_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _directory_rpc_service_is_directory_presult__isset;

class directory_rpc_service_is_directory_presult {
 public:


  virtual ~directory_rpc_service_is_directory_presult() throw();
  bool* success;
  directory_rpc_service_exception ex;

  _directory_rpc_service_is_directory_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class directory_rpc_serviceClientT : virtual public directory_rpc_serviceIf {
 public:
  directory_rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  directory_rpc_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void create_directory(const std::string& path);
  void send_create_directory(const std::string& path);
  void recv_create_directory();
  void create_directories(const std::string& path);
  void send_create_directories(const std::string& path);
  void recv_create_directories();
  void create_file(const std::string& path);
  void send_create_file(const std::string& path);
  void recv_create_file();
  bool exists(const std::string& path);
  void send_exists(const std::string& path);
  bool recv_exists();
  int64_t file_size(const std::string& path);
  void send_file_size(const std::string& path);
  int64_t recv_file_size();
  int64_t last_write_time(const std::string& path);
  void send_last_write_time(const std::string& path);
  int64_t recv_last_write_time();
  void set_permissions(const std::string& path, const rpc_perms perms, const rpc_perm_options opts);
  void send_set_permissions(const std::string& path, const rpc_perms perms, const rpc_perm_options opts);
  void recv_set_permissions();
  rpc_perms get_permissions(const std::string& path);
  void send_get_permissions(const std::string& path);
  rpc_perms recv_get_permissions();
  void remove(const std::string& path);
  void send_remove(const std::string& path);
  void recv_remove();
  void remove_all(const std::string& path);
  void send_remove_all(const std::string& path);
  void recv_remove_all();
  void rename(const std::string& old_path, const std::string& new_path);
  void send_rename(const std::string& old_path, const std::string& new_path);
  void recv_rename();
  void status(rpc_file_status& _return, const std::string& path);
  void send_status(const std::string& path);
  void recv_status(rpc_file_status& _return);
  void directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path);
  void send_directory_entries(const std::string& path);
  void recv_directory_entries(std::vector<rpc_dir_entry> & _return);
  void recursive_directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path);
  void send_recursive_directory_entries(const std::string& path);
  void recv_recursive_directory_entries(std::vector<rpc_dir_entry> & _return);
  void dstatus(rpc_data_status& _return, const std::string& path);
  void send_dstatus(const std::string& path);
  void recv_dstatus(rpc_data_status& _return);
  rpc_storage_mode mode(const std::string& path);
  void send_mode(const std::string& path);
  rpc_storage_mode recv_mode();
  void nodes(std::vector<std::string> & _return, const std::string& path);
  void send_nodes(const std::string& path);
  void recv_nodes(std::vector<std::string> & _return);
  bool is_regular_file(const std::string& path);
  void send_is_regular_file(const std::string& path);
  bool recv_is_regular_file();
  bool is_directory(const std::string& path);
  void send_is_directory(const std::string& path);
  bool recv_is_directory();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef directory_rpc_serviceClientT< ::apache::thrift::protocol::TProtocol> directory_rpc_serviceClient;

template <class Protocol_>
class directory_rpc_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (directory_rpc_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (directory_rpc_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_create_directory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_directory(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_create_directories(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_directories(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_create_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_file(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_exists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exists(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_file_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_file_size(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_last_write_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_last_write_time(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_set_permissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_permissions(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_permissions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_permissions(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_all(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_rename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rename(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_status(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_directory_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_directory_entries(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_recursive_directory_entries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recursive_directory_entries(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_dstatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dstatus(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mode(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_nodes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_nodes(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_is_regular_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_regular_file(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_is_directory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_directory(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  directory_rpc_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf> iface) :
    iface_(iface) {
    processMap_["create_directory"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_create_directory,
      &directory_rpc_serviceProcessorT::process_create_directory);
    processMap_["create_directories"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_create_directories,
      &directory_rpc_serviceProcessorT::process_create_directories);
    processMap_["create_file"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_create_file,
      &directory_rpc_serviceProcessorT::process_create_file);
    processMap_["exists"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_exists,
      &directory_rpc_serviceProcessorT::process_exists);
    processMap_["file_size"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_file_size,
      &directory_rpc_serviceProcessorT::process_file_size);
    processMap_["last_write_time"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_last_write_time,
      &directory_rpc_serviceProcessorT::process_last_write_time);
    processMap_["set_permissions"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_set_permissions,
      &directory_rpc_serviceProcessorT::process_set_permissions);
    processMap_["get_permissions"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_get_permissions,
      &directory_rpc_serviceProcessorT::process_get_permissions);
    processMap_["remove"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_remove,
      &directory_rpc_serviceProcessorT::process_remove);
    processMap_["remove_all"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_remove_all,
      &directory_rpc_serviceProcessorT::process_remove_all);
    processMap_["rename"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_rename,
      &directory_rpc_serviceProcessorT::process_rename);
    processMap_["status"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_status,
      &directory_rpc_serviceProcessorT::process_status);
    processMap_["directory_entries"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_directory_entries,
      &directory_rpc_serviceProcessorT::process_directory_entries);
    processMap_["recursive_directory_entries"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_recursive_directory_entries,
      &directory_rpc_serviceProcessorT::process_recursive_directory_entries);
    processMap_["dstatus"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_dstatus,
      &directory_rpc_serviceProcessorT::process_dstatus);
    processMap_["mode"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_mode,
      &directory_rpc_serviceProcessorT::process_mode);
    processMap_["nodes"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_nodes,
      &directory_rpc_serviceProcessorT::process_nodes);
    processMap_["is_regular_file"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_is_regular_file,
      &directory_rpc_serviceProcessorT::process_is_regular_file);
    processMap_["is_directory"] = ProcessFunctions(
      &directory_rpc_serviceProcessorT::process_is_directory,
      &directory_rpc_serviceProcessorT::process_is_directory);
  }

  virtual ~directory_rpc_serviceProcessorT() {}
};

typedef directory_rpc_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > directory_rpc_serviceProcessor;

template <class Protocol_>
class directory_rpc_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  directory_rpc_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< directory_rpc_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< directory_rpc_serviceIfFactory > handlerFactory_;
};

typedef directory_rpc_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > directory_rpc_serviceProcessorFactory;

class directory_rpc_serviceMultiface : virtual public directory_rpc_serviceIf {
 public:
  directory_rpc_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~directory_rpc_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf> > ifaces_;
  directory_rpc_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<directory_rpc_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void create_directory(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_directory(path);
    }
    ifaces_[i]->create_directory(path);
  }

  void create_directories(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_directories(path);
    }
    ifaces_[i]->create_directories(path);
  }

  void create_file(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_file(path);
    }
    ifaces_[i]->create_file(path);
  }

  bool exists(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exists(path);
    }
    return ifaces_[i]->exists(path);
  }

  int64_t file_size(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->file_size(path);
    }
    return ifaces_[i]->file_size(path);
  }

  int64_t last_write_time(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->last_write_time(path);
    }
    return ifaces_[i]->last_write_time(path);
  }

  void set_permissions(const std::string& path, const rpc_perms perms, const rpc_perm_options opts) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_permissions(path, perms, opts);
    }
    ifaces_[i]->set_permissions(path, perms, opts);
  }

  rpc_perms get_permissions(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_permissions(path);
    }
    return ifaces_[i]->get_permissions(path);
  }

  void remove(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(path);
    }
    ifaces_[i]->remove(path);
  }

  void remove_all(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_all(path);
    }
    ifaces_[i]->remove_all(path);
  }

  void rename(const std::string& old_path, const std::string& new_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rename(old_path, new_path);
    }
    ifaces_[i]->rename(old_path, new_path);
  }

  void status(rpc_file_status& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->status(_return, path);
    }
    ifaces_[i]->status(_return, path);
    return;
  }

  void directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->directory_entries(_return, path);
    }
    ifaces_[i]->directory_entries(_return, path);
    return;
  }

  void recursive_directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recursive_directory_entries(_return, path);
    }
    ifaces_[i]->recursive_directory_entries(_return, path);
    return;
  }

  void dstatus(rpc_data_status& _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dstatus(_return, path);
    }
    ifaces_[i]->dstatus(_return, path);
    return;
  }

  rpc_storage_mode mode(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mode(path);
    }
    return ifaces_[i]->mode(path);
  }

  void nodes(std::vector<std::string> & _return, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->nodes(_return, path);
    }
    ifaces_[i]->nodes(_return, path);
    return;
  }

  bool is_regular_file(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_regular_file(path);
    }
    return ifaces_[i]->is_regular_file(path);
  }

  bool is_directory(const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_directory(path);
    }
    return ifaces_[i]->is_directory(path);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class directory_rpc_serviceConcurrentClientT : virtual public directory_rpc_serviceIf {
 public:
  directory_rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  directory_rpc_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void create_directory(const std::string& path);
  int32_t send_create_directory(const std::string& path);
  void recv_create_directory(const int32_t seqid);
  void create_directories(const std::string& path);
  int32_t send_create_directories(const std::string& path);
  void recv_create_directories(const int32_t seqid);
  void create_file(const std::string& path);
  int32_t send_create_file(const std::string& path);
  void recv_create_file(const int32_t seqid);
  bool exists(const std::string& path);
  int32_t send_exists(const std::string& path);
  bool recv_exists(const int32_t seqid);
  int64_t file_size(const std::string& path);
  int32_t send_file_size(const std::string& path);
  int64_t recv_file_size(const int32_t seqid);
  int64_t last_write_time(const std::string& path);
  int32_t send_last_write_time(const std::string& path);
  int64_t recv_last_write_time(const int32_t seqid);
  void set_permissions(const std::string& path, const rpc_perms perms, const rpc_perm_options opts);
  int32_t send_set_permissions(const std::string& path, const rpc_perms perms, const rpc_perm_options opts);
  void recv_set_permissions(const int32_t seqid);
  rpc_perms get_permissions(const std::string& path);
  int32_t send_get_permissions(const std::string& path);
  rpc_perms recv_get_permissions(const int32_t seqid);
  void remove(const std::string& path);
  int32_t send_remove(const std::string& path);
  void recv_remove(const int32_t seqid);
  void remove_all(const std::string& path);
  int32_t send_remove_all(const std::string& path);
  void recv_remove_all(const int32_t seqid);
  void rename(const std::string& old_path, const std::string& new_path);
  int32_t send_rename(const std::string& old_path, const std::string& new_path);
  void recv_rename(const int32_t seqid);
  void status(rpc_file_status& _return, const std::string& path);
  int32_t send_status(const std::string& path);
  void recv_status(rpc_file_status& _return, const int32_t seqid);
  void directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path);
  int32_t send_directory_entries(const std::string& path);
  void recv_directory_entries(std::vector<rpc_dir_entry> & _return, const int32_t seqid);
  void recursive_directory_entries(std::vector<rpc_dir_entry> & _return, const std::string& path);
  int32_t send_recursive_directory_entries(const std::string& path);
  void recv_recursive_directory_entries(std::vector<rpc_dir_entry> & _return, const int32_t seqid);
  void dstatus(rpc_data_status& _return, const std::string& path);
  int32_t send_dstatus(const std::string& path);
  void recv_dstatus(rpc_data_status& _return, const int32_t seqid);
  rpc_storage_mode mode(const std::string& path);
  int32_t send_mode(const std::string& path);
  rpc_storage_mode recv_mode(const int32_t seqid);
  void nodes(std::vector<std::string> & _return, const std::string& path);
  int32_t send_nodes(const std::string& path);
  void recv_nodes(std::vector<std::string> & _return, const int32_t seqid);
  bool is_regular_file(const std::string& path);
  int32_t send_is_regular_file(const std::string& path);
  bool recv_is_regular_file(const int32_t seqid);
  bool is_directory(const std::string& path);
  int32_t send_is_directory(const std::string& path);
  bool recv_is_directory(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef directory_rpc_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> directory_rpc_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "directory_rpc_service.tcc"
#include "directory_service_types.tcc"

#endif
